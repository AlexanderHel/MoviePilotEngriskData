"种子帮助类": "Seed help category"
"把种子下载到本地": "Download the seeds locally"
":return: 种子保存路径、种子内容、种子主目录、种子文件清单、错误信息": ":return:  Seed save path、 Seed content、 Master catalog of seeds、 List of seed documents、 Error message"
"return None, url, "", [], f"磁力链接"": "return None, url, "", [], f" Magnetic link""
"# 请求种子文件": "#  Request for seed files"
"return None, url, "", [], f"获取到磁力链接"": "return None, url, "", [], f" Getting to the magnet link""
"return None, None, "", [], "未下载到种子数据"": "return None, None, "", [], " Seed data not downloaded""
"# 解析内容格式": "#  Parsing content format"
"# 磁力链接": "#  Magnetic link"
"return None, req.text, "", [], f"获取到磁力链接"": "return None, req.text, "", [], f" Getting to the magnet link""
"elif req.text and "下载种子文件" in req.text:": "elif req.text and " Download seed file" in req.text:"
"# 首次下载提示页面": "#  First time download reminder page"
"# 改写req": "#  Rewritereq"
"# 检查是不是种子文件，如果不是抛出异常": "#  Check if it's a seed file， If an exception is not thrown"
"# 跳过成功": "#  Skip success"
"logger.info(f"触发了站点首次种子下载，已自动跳过：{url}")": "logger.info(f" Triggered the site's first seed download， Automatically skipped：{url}")"
"logger.warn(f"触发了站点首次种子下载，且无法自动跳过，"": "logger.warn(f" Triggered the site's first seed download， And cannot be skipped automatically，""
"f"返回码：{req.status_code}，错误原因：{req.reason}")": "f" Return code：{req.status_code}， Cause of error：{req.reason}")"
"logger.warn(f"触发了站点首次种子下载，且无法自动跳过：{url}")": "logger.warn(f" Triggered the site's first seed download， And cannot be skipped automatically：{url}")"
"logger.warn(f"触发了站点首次种子下载，尝试自动跳过时出现错误：{err}，链接：{url}")": "logger.warn(f" Triggered the site's first seed download， Error when trying to auto-skip：{err}， Link (on a website)：{url}")"
"return None, None, "", [], "种子数据有误，请确认链接是否正确，如为PT站点则需手工在站点下载一次种子"": "return None, None, "", [], " Seed data incorrect， Please make sure the link is correct， IfPT The site will have to manually download the seed once at the site""
"# 种子内容": "#  Seed content"
"# 检查是不是种子文件，如果不是仍然抛出异常": "#  Check if it's a seed file， If not, the exception is still thrown"
"# 读取种子文件名": "#  Read seed file name"
"# 种子文件路径": "#  Seed file path"
"# 保存到文件": "#  Save to file"
"# 获取种子目录和文件清单": "#  Get a list of seed directories and files"
"# 成功拿到种子数据": "#  Success in getting seed data"
"logger.error(f"种子文件解析失败：{err}")": "logger.error(f" Seed file parsing failure：{err}")"
"# 种子数据仍然错误": "#  Seed data still incorrect"
"return None, None, "", [], "种子数据有误，请确认链接是否正确"": "return None, None, "", [], " Seed data incorrect， Please make sure the link is correct""
"# 返回失败": "#  Return failure"
"return None, None, "", [], "无法打开链接"": "return None, None, "", [], " Unable to open link""
"return None, None, "", [], "触发站点流控，请稍后重试"": "return None, None, "", [], " Trigger site flow control， Please try again later.""
"return None, None, "", [], f"下载种子出错，状态码：{req.status_code}"": "return None, None, "", [], f" Error downloading seeds， Status code：{req.status_code}""
"获取种子文件的文件夹名和文件清单": "Get the folder name and file list of the seed file"
":param torrent_path: 种子文件路径": ":param torrent_path:  Seed file path"
":return: 文件夹名、文件清单，单文件种子返回空文件夹名": ":return:  Folder name、 List of documents， Single file seeds return empty folder names"
"# 获取文件清单": "#  Access to the list of documents"
"# 单文件种子目录名返回空": "#  Single file seed directory name returns null"
"# 单文件种子": "#  Single-file seed"
"# 目录名": "#  Catalog name"
"# 文件清单，如果一级目录与种子名相同则去掉": "#  List of documents， Remove the first level directory if it is the same as the seed name"
"# 根路径": "#  Root path"
"logger.info(f"解析种子：{torrent_path.name} => 目录：{folder_name}，文件清单：{file_list}")": "logger.info(f" Parse seed：{torrent_path.name} =>  Catalogs：{folder_name}， List of documents：{file_list}")"
"logger.error(f"种子文件解析失败：{err}")": "logger.error(f" Seed file parsing failure：{err}")"
"从下载请求中获取种子文件名": "Get the seed file name from the download request"
"对种子对行排序": "Sorting seeds against rows"
"排序函数，值越大越优先": "Sorting function， The larger the value, the higher the priority"
"# 站点优先级": "#  Site prioritization"
"# 季数": "#  Quarter"
"# 集数": "#  Episode number (of a tv series etc)"
"# 无集数的排最前面": "#  No episodes at the top of the list."
"# 集数越多的排越前面": "#  The higher the number of episodes, the higher the ranking."
"# 优先规则": "#  Priority rules"
"# 排序：标题、资源类型、做种、季集": "#  Arrange in order： Caption、 Resource type、 Breed、 End of a season"
"# 排序：标题、资源类型、站点、做种、季集": "#  Arrange in order： Caption、 Resource type、 Website、 Breed、 End of a season"
"# 匹配的资源中排序分组选最好的一个下载": "#  Sorting and grouping of matching resources to select the best one to download"
"# 按站点顺序、资源匹配顺序、做种人数下载数逆序排序": "#  Order by site、 Resource matching order、 Do seed number of downloads in reverse order"
"对媒体信息进行排序、去重": "Sorting media messages、 De-emphasize"
"# 排序": "#  Arrange in order"
"# 控重": "#  Weight control"
"# 排序后重新加入数组，按真实名称控重，即只取每个名称的第一个": "#  Sort and rejoin the array， Weight control according to real names， That is, only the first name of each"
"# 控重的主链是名称、年份、季、集": "#  The main chain of weight control is the name、 Particular year、 Classifier for seasonal crop yield or seasons of a tv series、 Classifier for sections of a tv series e.g. episode"
"从种子的文件清单中获取所有集数": "Get all episodes from the seed's file list"
"# 只使用文件名识别": "#  Use only file name recognition"
