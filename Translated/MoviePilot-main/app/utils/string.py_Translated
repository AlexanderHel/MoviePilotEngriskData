"将文件大小文本转化为字节": "Convert file size text to bytes"
"将数字转换为时间描述": "Converting numbers to time descriptions"
"d = [(0, '秒'), (60 - 1, '分'), (3600 - 1, '小时'), (86400 - 1, '天')]": "d = [(0, 'Seconds'), (60 - 1, ' Minutes'), (3600 - 1, ' Hours'), (86400 - 1, 'Days')]"
"判断是否含有中文": "Determine whether it contains chinese"
"判断是否含有日文": "Determine whether it contains japanese"
"判断是否包含韩文": "Determine if korean is included"
"判断是否全是中文": "Determine whether all chinese"
"web字符串转int": "web string to int"
"web字符串转float": "web string to float"
"忽略特殊字符": "Ignore special characters"
"# 需要忽略的特殊字符": "#  Special characters to be ignored"
"去除特殊字符，同时大写": "Remove special characters， Capitalize"
"将字节计算为文件大小描述（带单位的格式化后返回）": "Calculates bytes into a file size description（ Return after formatting with units）"
"比较两个地址是否为同一个网站": "Compare two addresses to see if they are the same site"
"获取URL的协议和域名部分": "Get the protocol and domain name parts of the URL"
"获取URL的域名部分，只保留最后两级": "Get the domain name part of the URL, keeping only the last two levels"
"获取URL的二级域名部分，不含端口，若为IP则返回IP": "Get the second-level domain name part of the URL, excluding the port. If it is an IP, return the IP"
"获取URL根地址": "Get URL root address"
"生成一个指定长度的随机字符串": "Generate a random string of specified length"
"日期时间格式化 统一转成 2020-10-14 07:48:04 这种格式": "Date time formatting  Convert to 2020-10-14 07:48:04  This format"
"# 场景1: 带有时区的日期字符串 eg: Sat, 15 Oct 2022 14:02:54 +0800": "#  Take1:  Date string with time zone eg: Sat, 15 Oct 2022 14:02:54 +0800"
"# 场景2: 中间带T的日期字符串 eg: 2020-10-14T07:48:04": "#  Take2:  Date string with T in the middle eg: 2020-10-14T07:48:04"
"# 场景3: 中间带T的日期字符串 eg: 2020-10-14T07:48:04.208": "#  Take3:  Date string with T in the middle eg: 2020-10-14T07:48:04.208"
"# 场景4: 日期字符串以GMT结尾 eg: Fri, 14 Oct 2022 07:48:04 GMT": "#  Take4:  Date string ends with GMT eg: Fri, 14 Oct 2022 07:48:04 GMT"
"# 场景5: 日期字符串以UTC结尾 eg: Fri, 14 Oct 2022 07:48:04 UTC": "#  Take5:  Date string ends with UTC eg: Fri, 14 Oct 2022 07:48:04 UTC"
"# 场景6: 日期字符串以Z结尾 eg: Fri, 14 Oct 2022 07:48:04Z": "#  Take6:  Date string ends with Z eg: Fri, 14 Oct 2022 07:48:04Z"
"# 场景7: 日期字符串为相对时间 eg: 1 month, 2 days ago": "#  Take7:  Date string as relative time eg: 1 month, 2 days ago"
"# 传入的参数如果是None 或者空字符串 直接返回": "#  If the passed parameter is None or an empty string, it will be returned directly."
"时间戳转日期": "Timestamp to date"
"字符串转bool": "Convert string to bool"
":param text: 要转换的值": ":param text:  Value to be converted"
":param default_val: 默认值": ":param default_val:  Default value"
"将cookiejar转换为字符串": "Convert cookiejar to string"
"从字符串中提取id列表": "Extract list of ids from string"
":param content: 字符串": ":param content:  String"
":param dicts: 字典": ":param dicts:  Dictionaries"
"将分钟转换成小时和分钟": "Converting minutes to hours and minutes"
"return "%s小时%s分" % (hours, minutes)": "return "%s Hours%s Minutes" % (hours, minutes)"
"return "%s分钟" % minutes": "return "%s Minutes" % minutes"
"格式化显示金额": "Formatting display amounts"
"计算字符串中包含的单词或汉字的数量，需要兼容中英文混合的情况": "Counts the number of words or characters contained in a string， Need to be compatible with mixed chinese and english"
":param text: 要计算的字符串": ":param text:  String to be calculated"
":return: 字符串中包含的词数量": ":return:  Number of words contained in the string"
"# 使用正则表达式匹配汉字和英文单词": "#  Matching chinese characters and english words with regular expressions"
"# 匹配汉字和英文单词": "#  Match chinese characters and english words"
"# 过滤掉空格和数字": "#  Filter out spaces and numbers"
"# 计算汉字和英文单词的数量": "#  Counting chinese characters and english words"
"把文本拆分为固定字节长度的数组，优先按换行拆分，避免单词内拆分": "Split text into fixed-byte-length arrays， Priority split by newline， Avoid intra-word splits"
"# 分行": "#  Subsidiary bank"
"# 超长行继续拆分": "#  Ultra-long rows continue to split"
"# 英文行按空格拆分": "#  English lines split by space"
"# 中文行按字符拆分": "#  Chinese row split by character"
"# 超长则Yield": "#  If it is extra long, Yield"
"# 将最后的部分追加到buf": "#  Append the last part tobuf"
"# buf超长则Yield": "# If buf is too long, Yield"
"# 短行直接追加到buf": "#  Short lines are appended directly to buf"
"# 处理文本末尾剩余部分": "#  Processing of the remainder at the end of the text"
"从搜索关键字中拆分中年份、季、集、类型": "Split medium years from search keywords、 Classifier for seasonal crop yield or seasons of a tv series、 Classifier for sections of a tv series e.g. episode、 Typology"
"# 去掉查询中的电影或电视剧关键字": "#  Remove movie or tv show keywords from the query"
"# 稍微切一下剧集吧": "#  Let's cut the episode a little bit."
"大写首字母兼容None": "Capitalization of letters is compatibleNone"
"从地址中获取域名和端口号": "Get the domain name and port number from the address"
"# 处理不希望包含多个冒号的情况（除了协议后的冒号）": "#  Handling unwanted inclusion of multiple colons（ Except for the colon after the agreement）"
"# 检查是否包含端口号": "#  Check to see if the port number is included"
"# 端口号不是整数，返回 None 表示无效": "#  The port number is not an integer， Come (or go) back None  Indicate that sth is invalid"
"将季集列表转化为字符串简写": "Converting a list of seasonal episodes to string shorthand"
"# 确保数组按照升序排列": "#  Ensure that arrays are sorted in ascending order"
"# 处理最后一个序列": "#  Processing the last sequence"
"将剧集列表格式化为连续区间": "Formatting episode lists as continuous intervals"
"# 将数组升序排序": "#  Sort the array in ascending order"
"判断字符是否为可以转换为整数或者浮点数": "Determine whether a character can be converted to an integer or a floating point number."
