"""" 对企业微信发送给企业后台的消息加解密示例代码.": """"  Sample code for encrypting and decrypting messages sent by enterprise wechat to the enterprise backend."
"# Description:定义错误码含义": "# Description: Define the meaning of the error code"
"关于Crypto.Cipher模块，ImportError: No module named 'Crypto'解决方案": "Crypto.Cipher With respect to，ImportError: No module named 'Crypto' Module (in software)
 Prescription"
"请到官方网站 https://www.dlitz.net/software/pycrypto/ 下载pycrypto。": "https://www.dlitz.net/software/pycrypto/  Please go to the official websitepycrypto。
 Downloading"
"下载后，按照README中的“Installation”小节的提示进行pycrypto安装。": "， After downloadingREADME On the basis of“Installation” Hit the nail on the headpycrypto The prompts in the vignettes carry。
 Mounting"
""""计算企业微信的消息签名接口"""": """" Calculating the message signature interface for enterprise wechat""""
""""用SHA1算法生成安全签名": """" Expense or outlaySHA1 Algorithmic generation of secure signatures"
"@param token:  票据": "@param token:   Bill"
"@param timestamp: 时间戳": "@param timestamp:  Timestamp"
"@param encrypt: 密文": "@param encrypt:  Coded text"
"@param nonce: 随机字符串": "@param nonce:  Random string"
"@return: 安全签名": "@return:  Secure signature"
""""提供提取消息格式中的密文及生成回复消息格式的接口"""": """" Provide interfaces for extracting ciphertext from message formats and generating reply message formats.""""
"# xml消息模板": "# xml Message templates"
""""提取出xml数据包中的加密消息": """" Extractxml Encrypted messages in packets"
"@param xmltext: 待提取的xml字符串": "@param xmltext:  Prospectivexml String (computer science)"
"@return: 提取出的加密消息字符串": "@return:  Extracted encrypted message string"
""""生成xml消息": """" Generatingxml Messages"
"@param encrypt: 加密后的消息密文": "@param encrypt:  Encrypted message cipher"
"@param signature: 安全签名": "@param signature:  Secure signature"
"@param timestamp: 时间戳": "@param timestamp:  Timestamp"
"@param nonce: 随机字符串": "@param nonce:  Random string"
"@return: 生成的xml字符串": "@return:  Generatedxml String (computer science)"
""""提供基于PKCS7算法的加解密接口"""": """" ProvidePKCS7 Encryption and decryption interfaces for algorithms""""
"""" 对需要加密的明文进行填充补位": """"  Padding complement for plaintext to be encrypted"
"@param text: 需要进行填充补位操作的明文": "@param text:  Plaintexts that require a fill-fill operation"
"@return: 补齐明文字符串": "@return:  Complementary plaintext strings"
"# 计算需要填充的位数": "#  Calculate the number of bits to be filled"
"# 获得补位所用的字符": "#  Get the character used for the complement"
""""删除解密后明文的补位字符": """" Deletes the complementary characters of the decrypted plaintext."
"@param decrypted: 解密后的明文": "@param decrypted:  Decrypted plaintext"
"@return: 删除补位字符后的明文": "@return:  Plaintext after deletion of the complementary character"
""""提供接收和推送给企业微信消息的加解密接口"""": """" Provide encryption and decryption interfaces for receiving and pushing wechat messages to enterprises""""
"# 设置加解密模式为AES的CBC模式": "#  Set the encryption and decryption mode toAES (used form a nominal expression)CBC Paradigm"
""""对明文进行加密": """" Encrypting plaintext"
"@param text: 需要加密的明文": "@param text:  Plaintext (computing) that requires encryption"
"@return: 加密得到的字符串": "@return:  Encrypted string"
"# 16位随机字符串添加到明文开头": "# 16 Bit random string added to the beginning of the plaintext"
"# 使用自定义的填充方式对明文进行补位填充": "#  Complementary padding of plaintexts using customized padding methods"
"# 加密": "#  Encrypted"
"# 使用BASE64对加密后的字符串进行编码": "#  UtilizationBASE64 Encoding the encrypted string"
""""对解密后的明文进行补位删除": """" Complementary deletion of the decrypted plaintext"
"@param text: 密文": "@param text:  Coded text"
"@return: 删除填充补位后的明文": "@return:  Delete plaintext after padding complement"
"# 使用BASE64对密文进行解码，然后AES-CBC解密": "#  UtilizationBASE64 Decode the ciphertext， After thatAES-CBC Declassification"
"# 去掉补位字符串": "#  Remove complementary strings"
"# 去除16位随机字符串": "#  Dislodge16 Bitwise random string"
"""" 随机生成16位字符串": """"  Randomly generated16 Bit string"
"@return: 16位字符串": "@return: 16 Bit string"
"# 构造函数": "#  Constructor"
"# 验证URL": "#  Validate (a theory)URL"
"# @param sMsgSignature: 签名串，对应URL参数的msg_signature": "# @param sMsgSignature:  Signature string， HomologousURL Parametricmsg_signature"
"# @param sTimeStamp: 时间戳，对应URL参数的timestamp": "# @param sTimeStamp:  Timestamp， HomologousURL Parametrictimestamp"
"# @param sNonce: 随机串，对应URL参数的nonce": "# @param sNonce:  Random string， HomologousURL Parametricnonce"
"# @param sEchoStr: 随机串，对应URL参数的echostr": "# @param sEchoStr:  Random string， HomologousURL Parametricechostr"
"# @param sReplyEchoStr: 解密之后的echostr，当return返回0时有效": "# @param sReplyEchoStr:  Declassifiedechostr， (coll.) fail (a student)return Come (or go) back0 Currently valid"
"# @return：成功0，失败返回对应的错误码": "# @return： Successes0， Failure returns the corresponding error code"
"# 将企业回复用户的消息加密打包": "#  Encrypted packaging of corporate replies to users"
"# @param sReplyMsg: 企业号待回复用户的消息，xml格式的字符串": "# @param sReplyMsg:  Enterprise pending reply to user's message，xml Formatted strings"
"# @param sTimeStamp: 时间戳，可以自己生成，也可以用URL参数的timestamp,如为None则自动用当前时间": "# @param sTimeStamp:  Timestamp， You can generate your own， It is also possible to useURL Parametrictimestamp, IfNone Then the current time is automatically used"
"# @param sNonce: 随机串，可以自己生成，也可以用URL参数的nonce": "# @param sNonce:  Random string， You can generate your own， It is also possible to useURL Parametricnonce"
"# sEncryptMsg: 加密后的可以直接回复用户的密文，包括msg_signature, timestamp, nonce, encrypt的xml格式的字符串,": "# sEncryptMsg:  Encrypted cipher text that can be directly replied to by the user， Including throughmsg_signature, timestamp, nonce, encrypt (used form a nominal expression)xml Formatted strings,"
"# return：成功0，sEncryptMsg,失败返回对应的错误码None": "# return： Successes0，sEncryptMsg, Failure returns the corresponding error codeNone"
"# 生成安全签名": "#  Generate secure signatures"
"# 检验消息的真实性，并且获取解密后的明文": "#  Test the authenticity of the message， And get the decrypted plaintext"
"# @param sMsgSignature: 签名串，对应URL参数的msg_signature": "# @param sMsgSignature:  Signature string， HomologousURL Parametricmsg_signature"
"# @param sTimeStamp: 时间戳，对应URL参数的timestamp": "# @param sTimeStamp:  Timestamp， HomologousURL Parametrictimestamp"
"# @param sNonce: 随机串，对应URL参数的nonce": "# @param sNonce:  Random string， HomologousURL Parametricnonce"
"# @param sPostData: 密文，对应POST请求的数据": "# @param sPostData:  Coded text， HomologousPOST Requested data"
"#  xml_content: 解密后的原文，当return返回0时有效": "#  xml_content:  Declassified original， (coll.) fail (a student)return Come (or go) back0 Currently valid"
"# @return: 成功0，失败返回对应的错误码": "# @return:  Successes0， Failure returns the corresponding error code"
"# 验证安全签名": "#  Verify security signatures"
