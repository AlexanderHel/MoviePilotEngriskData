"# 插件名称": "#  Plug-in name"
"plugin_name = "下载器文件同步"": "plugin_name = " Downloader file synchronization""
"# 插件描述": "#  Plugin description"
"plugin_desc = "同步下载器的文件信息到数据库，删除文件时联动删除下载任务。"": "plugin_desc = " Synchronize downloader file information to database， Delete download tasks when deleting files。""
"# 插件图标": "#  Plug-in icons"
"# 主题色": "#  Theme color"
"# 插件版本": "#  Plug-in version"
"# 插件作者": "#  Plug-in authors"
"# 作者主页": "#  Author's homepage"
"# 插件配置项ID前缀": "#  Plug-in configuration itemsID Prefix (linguistics)"
"# 加载顺序": "#  Loading sequence"
"# 可使用的用户级别": "#  Available user levels"
"# 私有属性": "#  Private property"
"# 任务执行间隔": "#  Task execution interval"
"# 定时器": "#  Timers"
"# 停止现有任务": "#  Discontinuation of existing mandates"
"# 清理下载器文件记录": "#  Clear downloader file logs"
"# 清理下载器最后处理记录": "#  Clearing the downloader's last processed record"
"# 获取最后同步时间": "#  Get the last synchronization time"
"# 关闭clear": "#  Clotureclear"
"# 执行一次": "#  Execute once"
"# 关闭onlyonce": "#  Clotureonlyonce"
"# 定时服务": "#  Time service"
"name="自动同步下载器文件记录")": "name=" Automatic synchronization of downloader file records")"
"logger.info(f"自动同步下载器文件记录服务启动，时间间隔 {self._time} 小时")": "logger.info(f" Automatic synchronization of downloader file logging service startup， Time interval {self._time}  Hourly")"
"logger.error(f"定时任务配置错误：{err}")": "logger.error(f" Timed task configuration error：{err}")"
"# 启动任务": "#  Initiate tasks"
"同步所选下载器种子记录": "Synchronize selected downloader seed records"
"logger.info("开始同步下载器任务文件记录")": "logger.info(" Start synchronizing downloader task file records")"
"logger.error("未选择同步下载器，停止运行")": "logger.error(" Synchronized downloader not selected， Stop running")"
"# 遍历下载器同步记录": "#  Iterate over downloader synchronization records"
"# 获取最后同步时间": "#  Get the last synchronization time"
"logger.info(f"开始扫描下载器 {downloader} ...")": "logger.info(f" Start scanning the downloader {downloader} ...")"
"# 获取下载器中已完成的种子": "#  Getting completed seeds in the downloader"
"logger.info(f"下载器 {downloader} 已完成种子数：{len(torrents)}")": "logger.info(f" Downloader {downloader}  Number of seeds completed：{len(torrents)}")"
"logger.info(f"下载器 {downloader} 没有已完成种子")": "logger.info(f" Downloader {downloader}  No completed seeds")"
"# 把种子按照名称和种子大小分组，获取添加时间最早的一个，认定为是源种子，其余为辅种": "#  Grouping seeds by name and seed size， Get the one with the earliest add time， Determined to be a source seed， The rest are auxiliary species"
"logger.info(f"下载器 {downloader} 去除辅种，获取到源种子数：{len(torrents)}")": "logger.info(f" Downloader {downloader}  Removal of auxiliary species， Number of source seeds obtained：{len(torrents)}")"
"# 返回false，标识后续种子已被同步": "#  Come (or go) backfalse， Identifies that subsequent seeds have been synchronized"
"logger.info(f"最后同步时间{last_sync_time}, 之前种子已被同步，结束当前下载器 {downloader} 任务")": "logger.info(f" Final synchronization time{last_sync_time},  Seeds were previously synchronized， End current downloader {downloader}  Mandates")"
"# 获取种子hash": "#  Getting seedshash"
"# 判断是否是mp下载，判断download_hash是否在downloadhistory表中，是则不处理": "#  Determine if it ismp Downloading， Judgementsdownload_hash Whether or notdownloadhistory Statistical tables， Yes, not processed"
"logger.info(f"种子 {hash_str} 通过MoviePilot下载，跳过处理")": "logger.info(f" Torrent {hash_str}  Pass (a bill or inspection etc)MoviePilot Downloading， Skip processing")"
"# 获取种子download_dir": "#  Getting seedsdownload_dir"
"# 处理路径映射": "#  Handling path mapping"
"# 获取种子name": "#  Getting seedsname"
"# 种子保存目录": "#  Seed saving catalog"
"# 获取种子文件": "#  Getting the seed file"
"logger.info(f"开始同步种子 {hash_str}, 文件数 {len(torrent_files)}")": "logger.info(f" Start synchronizing seeds {hash_str},  Number of documents {len(torrent_files)}")"
"# 过滤掉没下载的文件": "#  Filtering out un-downloaded files"
"# 种子文件路径": "#  Seed file path"
"# 只处理视频格式": "#  Handles only video formats"
"# 种子文件根路程": "#  Seed file root path"
"# 不含种子名称的种子文件相对路径": "#  Relative path to the seed file without the seed name"
"# 完整路径": "#  Full path"
"logger.info(f"开始补充转移记录：{transferhis.id} download_hash {hash_str}")": "logger.info(f" Commencement of replenishment of transfer records：{transferhis.id} download_hash {hash_str}")"
"# 种子文件记录": "#  Seed documentation records"
"# 登记下载文件": "#  Register to download files"
"logger.info(f"种子 {hash_str} 同步完成")": "logger.info(f" Torrent {hash_str}  Synchronized completion")"
"logger.info(f"下载器种子文件同步完成！")": "logger.info(f" Downloader seed file synchronization complete！")"
"# 计算耗时": "#  Computational time"
"logger.info(f"下载器任务文件记录已同步完成。总耗时 {(end_time - start_time).seconds} 秒")": "logger.info(f" Downloader task file record synchronization completed。 Total time consumption {(end_time - start_time).seconds}  Unit of angle or arc equivalent one sixtieth of a degree")"
"# 把种子按照名称和种子大小分组，获取添加时间最早的一个，认定为是源种子，其余为辅种": "#  Grouping seeds by name and seed size， Get the one with the earliest add time， Determined to be a source seed， The rest are auxiliary species"
"# 排序种子，根据种子添加时间倒序": "#  Sorting seeds， Seeds added in reverse chronological order"
"# 遍历原始数组，按照size和name进行分组": "#  Iterate over the original array， On the basis ofsize Cap (a poem)name Cluster"
"key = (size, name)  # 使用元组作为字典的键": "key = (size, name)  #  Using tuples as keys for dictionaries"
"# 如果分组键不存在，则将当前元素作为最小元素添加到字典中": "#  If the grouping key does not exist， Then the current element is added to the dictionary as the smallest element"
"# 如果分组键已存在，则比较当前元素的time是否更小，如果更小则更新字典中的元素": "#  If the grouping key already exists， Then compares the current element'stime Is it smaller， Update elements in the dictionary if smaller"
"# 遍历原始数组，按照size和name进行分组": "#  Iterate over the original array， On the basis ofsize Cap (a poem)name Cluster"
"key = (size, name)  # 使用元组作为字典的键": "key = (size, name)  #  Using tuples as keys for dictionaries"
"# 如果分组键不存在，则将当前元素作为最小元素添加到字典中": "#  If the grouping key does not exist， Then the current element is added to the dictionary as the smallest element"
"# 如果分组键已存在，则比较当前元素的time是否更小，如果更小则更新字典中的元素": "#  If the grouping key already exists， Then compares the current element'stime Is it smaller， Update elements in the dictionary if smaller"
"# 新的数组": "#  New arrays"
"# 获取种子时间": "#  Getting seed time"
"torrent_date = time.gmtime(torrent.get("added_on"))  # 将时间戳转换为时间元组": "torrent_date = time.gmtime(torrent.get("added_on"))  #  Converting timestamps to time tuples"
"torrent_date = time.strftime("%Y-%m-%d %H:%M:%S", torrent_date)  # 格式化时间": "torrent_date = time.strftime("%Y-%m-%d %H:%M:%S", torrent_date)  #  Formatting time"
"# 之后的种子已经同步了": "#  The seeds after that have been synchronized"
"判断文件是否被下载": "Determine if a file has been downloaded"
"获取文件路径": "Get file path"
"获取种子文件": "Getting the seed file"
"获取种子name": "Getting seedsname"
"获取种子download_dir": "Getting seedsdownload_dir"
"获取种子hash": "Getting seedshash"
"根据类型返回下载器实例": "Returns downloader instances by type"
"拼装插件配置页面，需要返回两块数据：1、页面配置；2、数据结构": "Assembly plugin configuration page， Two pieces of data need to be returned：1、 Page configuration；2、 Data structure"
"'label': '开启插件',": "'label': ' Enabling plug-ins',"
"'label': '立即运行一次',": "'label': ' Run one immediately',"
"'label': '补充整理历史记录',": "'label': ' Supplementing and organizing historical records',"
"'label': '清理数据',": "'label': ' Cleaning of data',"
"'label': '同步时间间隔'": "'label': ' Synchronization interval'"
"'label': '同步下载器',": "'label': ' Synchronous downloader',"
"'label': '目录映射',": "'label': ' Directory map',"
"'placeholder': '每一行一个目录，下载器保存目录:MoviePilot映射目录'": "'placeholder': ' One directory per line， Downloader save directory:MoviePilot Mapping directory'"
"'text': '适用于非MoviePilot下载的任务；下载器种子数据较多时，同步时间将会较长，请耐心等候，可查看实时日志了解同步进度；时间间隔建议最少每6小时执行一次，防止上次任务没处理完。'": "'text': ' Suitable for nonMoviePilot Downloaded tasks； When the downloader has more seed data， Synchronization will take longer， Please be patient.， Real-time logs can be viewed for synchronization progress； The time interval is recommended to be at least every6 Performed once an hour， In case the last task was not completed。'"
"退出插件": "Exit plugin"
"logger.error("退出插件失败：%s" % str(e))": "logger.error(" Failed to exit the plugin：%s" % str(e))"
