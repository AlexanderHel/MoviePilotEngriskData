"# 插件名称": "#  Plug-in name"
"plugin_name = "收藏洗版"": "plugin_name = " Collection wash""
"# 插件描述": "#  Plugin description"
"plugin_desc = "Jellyfin/Emby/Plex点击收藏电影后，自动订阅洗版。"": "plugin_desc = "Jellyfin/Emby/Plex After clicking favorite movies， Automatic subscription washout。""
"# 插件图标": "#  Plug-in icons"
"# 主题色": "#  Theme color"
"# 插件版本": "#  Plug-in version"
"# 插件作者": "#  Plug-in authors"
"# 作者主页": "#  Author's homepage"
"# 插件配置项ID前缀": "#  Plug-in configuration itemsID Prefix (linguistics)"
"# 加载顺序": "#  Loading sequence"
"# 可使用的用户级别": "#  Available user levels"
"# 私有变量": "#  Private variable"
"# 配置属性": "#  Configuration properties"
"# 停止现有任务": "#  Discontinuation of existing mandates"
"# 配置": "#  Configure"
"name="收藏洗版")": "name=" Collection wash")"
"logger.error(f"定时任务配置错误：{err}")": "logger.error(f" Timed task configuration error：{err}")"
"# 推送实时消息": "#  Push real-time messages"
"self.systemmessage.put(f"执行周期配置错误：{err}")": "self.systemmessage.put(f" Execution cycle misconfiguration：{err}")"
"self._scheduler.add_job(self.sync, "interval", minutes=30, name="收藏洗版")": "self._scheduler.add_job(self.sync, "interval", minutes=30, name=" Collection wash")"
"name="立即运行收藏洗版")": "name=" Run now favorite washed version")"
"# 启动任务": "#  Initiate tasks"
"获取插件API": "Get pluginsAPI"
""summary": "API说明"": ""summary": "API Clarification""
"拼装插件配置页面，需要返回两块数据：1、页面配置；2、数据结构": "Assembly plugin configuration page， Two pieces of data need to be returned：1、 Page configuration；2、 Data structure"
"'label': '启用插件',": "'label': ' Enabling plug-ins',"
"'label': '发送通知',": "'label': ' Send notification',"
"'label': '立即运行一次',": "'label': ' Run one immediately',"
"'label': '执行周期',": "'label': ' Implementation period',"
"'placeholder': '5位cron表达式，留空自动'": "'placeholder': '5 Classifier for honorific peoplecron Displayed formula， Leave blank spaces in writing'"
"'text': '支持主动定时获取媒体库数据和Webhook实时触发两种方式，两者只能选其一，'": "'text': ' Supports proactive timed acquisition of media library data andWebhook Real-time triggering in two ways， It's one or the other.，'"
"'Webhook需要在媒体服务器设置发送Webhook报文。'": "'Webhook You need to set up the media server to sendWebhook Telegram。'"
"'Plex使用主动获取时，建议执行周期设置大于1小时，'": "'Plex When using active acquisition， It is recommended that the execution period be set greater than1 Hourly，'"
"'收藏Api调用Plex官网接口，有频率限制。'": "' FavoriteApi Call (programming)Plex Official website interface， Frequency limited。'"
"拼装插件详情页面，需要返回页面配置，同时附带数据": "Patchwork plug-in detail page， Need to return to page configuration， Also with data"
"# 查询同步详情": "#  Query synchronization details"
"'text': '暂无数据',": "'text': ' No data available',"
"# 数据按时间降序排序": "#  Data is sorted in descending chronological order"
"# 拼装页面": "#  Assembly page"
"'text': f'类型：{mtype}'": "'text': f' Typology：{mtype}'"
"'text': f'时间：{time_str}'": "'text': f' Timing：{time_str}'"
"退出插件": "Exit plugin"
"logger.error("退出插件失败：%s" % str(e))": "logger.error(" Failed to exit the plugin：%s" % str(e))"
"通过流媒体管理工具收藏,自动洗版": "Favorites via streaming management tool, Automatic plate washing"
"# 获取锁": "#  Acquisition lock"
"# 读取缓存": "#  Read cache"
"# 读取历史记录": "#  Read history"
"# 媒体服务器类型，多个以,分隔": "#  Media server type， Many of, Segregation"
"# 读取收藏": "#  Read favorites"
"# 处理所有结果": "#  Process all results"
"# all_item 根据电影名去重": "# all_item  De-weighting based on movie titles"
"# 检查缓存": "#  Checking the cache"
"# 获取详情": "#  Get details"
"logger.debug(f'BestFilmVersion插件 item打印 {item_info_resp}')": "logger.debug(f'BestFilmVersion Plug-in (software component) item Printable {item_info_resp}')"
"# 只接受Movie类型": "#  Accept onlyMovie Typology"
"# 获取tmdb_id": "#  Gaintmdb_id"
"# 识别媒体信息": "#  Identify media messages"
"logger.warn(f'未识别到媒体信息，标题：{data.get("Name")}，tmdbid：{tmdb_id}')": "logger.warn(f' No media messages recognized， Caption：{data.get("Name")}，tmdbid：{tmdb_id}')"
"# 添加订阅": "#  Add subscription"
"username="收藏洗版",": "username=" Collection wash","
"# 加入缓存": "#  Add to cache"
"# 存储历史记录": "#  Storing history"
"# 保存历史记录": "#  Save history"
"# 保存缓存": "#  Save cache"
"# 获取所有user": "#  Get alluser"
"# 根据加入日期 降序排序": "#  Based on date of accession  Descending order"
"# 获取所有user": "#  Get alluser"
"# 根据加入日期 降序排序": "#  Based on date of accession  Descending order"
"logger.error(f"BestFilmVersion/Users 未获取到返回数据")": "logger.error(f"BestFilmVersion/Users  Return data not obtained")"
"logger.error(f"连接BestFilmVersion/Users 出错：" + str(e))": "logger.error(f" GroutBestFilmVersion/Users  Make a mistake：" + str(e))"
"# 根据加入日期 降序排序": "#  Based on date of accession  Descending order"
"# 获取文档元素对象": "#  Getting document element objects"
"# 获取 指定元素": "#  Gain  Specify element"
"# 获取标签中内容": "#  Getting content in tags"
"logger.error(f"Plex/Watchlist 未获取到返回数据")": "logger.error(f"Plex/Watchlist  Return data not obtained")"
"logger.error(f"连接Plex/Watchlist 出错：" + str(e))": "logger.error(f" GroutPlex/Watchlist  Make a mistake：" + str(e))"
"logger.error(f"Plex/Items 未获取到返回数据")": "logger.error(f"Plex/Items  Return data not obtained")"
"logger.error(f"连接Plex/Items 出错：" + str(e))": "logger.error(f" GroutPlex/Items  Make a mistake：" + str(e))"
"# 排除不是收藏调用": "#  Exclusion is not a collection call"
"logger.info(f'BestFilmVersion/webhook_message_action WebhookEventInfo打印：{data}')": "logger.info(f'BestFilmVersion/webhook_message_action WebhookEventInfo Printable：{data}')"
"# 获取锁": "#  Acquisition lock"
"logger.debug(f'BestFilmVersion/webhook_message_action item打印：{info}')": "logger.debug(f'BestFilmVersion/webhook_message_action item Printable：{info}')"
"# 获取tmdb_id": "#  Gaintmdb_id"
"# 识别媒体信息": "#  Identify media messages"
"logger.warn(f'未识别到媒体信息，标题：{data.item_name}，tmdbID：{tmdb_id}')": "logger.warn(f' No media messages recognized， Caption：{data.item_name}，tmdbID：{tmdb_id}')"
"# 读取缓存": "#  Read cache"
"# 检查缓存": "#  Checking the cache"
"# 读取历史记录": "#  Read history"
"# 添加订阅": "#  Add subscription"
"username="收藏洗版",": "username=" Collection wash","
"# 加入缓存": "#  Add to cache"
"# 存储历史记录": "#  Storing history"
"# 保存历史记录": "#  Save history"
"# 保存缓存": "#  Save cache"
