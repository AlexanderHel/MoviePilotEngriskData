"# 插件名称": "#  Plug-in name"
"plugin_name = "媒体文件同步删除"": "plugin_name = " Simultaneous deletion of media files""
"# 插件描述": "#  Plugin description"
"plugin_desc = "同步删除历史记录、源文件和下载任务。"": "plugin_desc = " Synchronized deletion of history、 Source files and download tasks。""
"# 插件图标": "#  Plug-in icons"
"# 主题色": "#  Theme color"
"# 插件版本": "#  Plug-in version"
"# 插件作者": "#  Plug-in authors"
"# 作者主页": "#  Author's homepage"
"# 插件配置项ID前缀": "#  Plug-in configuration itemsID Prefix (linguistics)"
"# 加载顺序": "#  Loading sequence"
"# 可使用的用户级别": "#  Available user levels"
"# 私有属性": "#  Private property"
"# 停止现有任务": "#  Discontinuation of existing mandates"
"# 读取配置": "#  Read configuration"
"name="媒体库同步删除")": "name=" Media library synchronized deletion")"
"logger.error(f"定时任务配置错误：{err}")": "logger.error(f" Timed task configuration error：{err}")"
"# 推送实时消息": "#  Push real-time messages"
"self.systemmessage.put(f"执行周期配置错误：{err}")": "self.systemmessage.put(f" Execution cycle misconfiguration：{err}")"
"self._scheduler.add_job(self.sync_del_by_log, "interval", minutes=30, name="媒体库同步删除")": "self._scheduler.add_job(self.sync_del_by_log, "interval", minutes=30, name=" Media library synchronized deletion")"
"# 启动任务": "#  Initiate tasks"
"定义远程控制命令": "Defining remote control commands"
":return: 命令关键字、事件、描述、附带数据": ":return:  Command keywords、 Event、 Descriptive、 Accompanying data"
"拼装插件配置页面，需要返回两块数据：1、页面配置；2、数据结构": "Assembly plugin configuration page， Two pieces of data need to be returned：1、 Page configuration；2、 Data structure"
"'label': '启用插件',": "'label': ' Enabling plug-ins',"
"'label': '发送通知',": "'label': ' Send notification',"
"'label': '删除源文件',": "'label': ' Deleting source files',"
"'label': '媒体库同步方式',": "'label': ' Media library synchronization method',"
"{'title': '日志', 'value': 'log'},": "{'title': ' Log (computing)', 'value': 'log'},"
"'label': '日志检查周期',": "'label': ' Log checking cycle',"
"'placeholder': '5位cron表达式，留空自动'": "'placeholder': '5 Classifier for honorific peoplecron Displayed formula， Leave blank spaces in writing'"
"'label': '排除路径'": "'label': ' Excluded paths'"
"'label': '媒体库路径映射',": "'label': ' Media library path mapping',"
"'placeholder': '媒体服务器路径:MoviePilot路径（一行一个）'": "'placeholder': ' Media server path:MoviePilot Trails（ One in a row）'"
"'text': '媒体库同步方式分为Webhook、日志同步和Scripter X：'": "'text': ' The media library synchronization methods are divided intoWebhook、 Log synchronization andScripter X：'"
"'1、Webhook需要Emby4.8.0.45及以上开启媒体删除的Webhook。'": "'1、Webhook NeedEmby4.8.0.45 And above turn on the media deletedWebhook。'"
"'2、日志同步需要配置检查周期，默认30分钟执行一次。'": "'2、 Log synchronization requires a configurable check period， Default (setting)30 Performed once a minute。'"
"'3、Scripter X方式需要emby安装并配置Scripter X插件，无需配置执行周期。'": "'3、Scripter X The approach needs to beemby Installation and configurationScripter X Plug-in (software component)， No need to configure execution cycles。'"
"'4、启用该插件后，非媒体服务器触发的源文件删除，也会同步处理下载器中的下载任务。'": "'4、 After enabling the plugin， Non-media server triggered source file deletion， Download tasks in the downloader are also processed synchronously。'"
"拼装插件详情页面，需要返回页面配置，同时附带数据": "Patchwork plug-in detail page， Need to return to page configuration， Also with data"
"# 查询同步详情": "#  Query synchronization details"
"'text': '暂无数据',": "'text': ' No data available',"
"# 数据按时间降序排序": "#  Data is sorted in descending chronological order"
"# 拼装页面": "#  Assembly page"
"'text': f'类型：{htype}'": "'text': f' Typology：{htype}'"
"'text': f'标题：{title}'": "'text': f' Caption：{title}'"
"'text': f'年份：{year}'": "'text': f' Particular year：{year}'"
"'text': f'季：{season}'": "'text': f' Classifier for seasonal crop yield or seasons of a tv series：{season}'"
"'text': f'集：{episode}'": "'text': f' Classifier for sections of a tv series e.g. episode：{episode}'"
"'text': f'时间：{del_time}'": "'text': f' Timing：{del_time}'"
"'text': f'类型：{htype}'": "'text': f' Typology：{htype}'"
"'text': f'标题：{title}'": "'text': f' Caption：{title}'"
"'text': f'年份：{year}'": "'text': f' Particular year：{year}'"
"'text': f'时间：{del_time}'": "'text': f' Timing：{del_time}'"
"emby删除媒体库同步删除历史记录": "emby Delete media library synchronized delete history"
"# 媒体类型": "#  Media type"
"# 媒体名称": "#  Media name"
"# 媒体路径": "#  Media path"
"# 季数": "#  Quarter"
"# 集数": "#  Episode number (of a tv series etc)"
"emby删除媒体库同步删除历史记录": "emby Delete media library synchronized delete history"
"Scripter X插件": "Scripter X Plug-in (software component)"
"# Scripter X插件 event_type = media_del": "# Scripter X Plug-in (software component) event_type = media_del"
"# Scripter X插件 需要是否虚拟标识": "# Scripter X Plug-in (software component)  Need for virtual logo or not"
"logger.error("Scripter X插件方式，item_isvirtual参数未配置，为防止误删除，暂停插件运行")": "logger.error("Scripter X Plug-in method，item_isvirtual Parameters not configured， To prevent accidental deletion， Suspend plugin operation")"
"# 如果是虚拟item，则直接return，不进行删除": "#  If it's a virtualitem， Failing agreementreturn， No deletion"
"# 媒体类型": "#  Media type"
"# 媒体名称": "#  Media name"
"# 媒体路径": "#  Media path"
"# 季数": "#  Quarter"
"# 集数": "#  Episode number (of a tv series etc)"
"执行删除逻辑": "Execute deletion logic"
"logger.error(f"{media_name} 同步删除失败，未获取到媒体类型")": "logger.error(f"{media_name}  Synchronized deletion failure， Media type not captured")"
"logger.error(f"{media_name} 同步删除失败，未获取到TMDB ID")": "logger.error(f"{media_name}  Synchronized deletion failure， Not availableTMDB ID")"
"logger.info(f"媒体路径 {media_path} 已被排除，暂不处理")": "logger.info(f" Media path {media_path}  Excluded， Withheld")"
"# 查询转移记录": "#  Access to transfer records"
"logger.info(f"正在同步删除{msg}")": "logger.info(f" Deletions are being synchronized{msg}")"
"logger.warn(f"{media_type} {media_name} 未获取到可删除数据，可使用媒体库刮削插件覆盖所有元数据")": "logger.warn(f"{media_type} {media_name}  Deletable data not captured， All metadata can be overwritten using the media library scraping plugin")"
"# 开始删除": "#  Start deleting"
"f"当前转移记录 {transferhis.id} {title} {transferhis.tmdbid} 与删除媒体{media_name}不符，防误删，暂不自动删除")": "f" Current transfer records {transferhis.id} {title} {transferhis.tmdbid}  With the deletion of the media{media_name} Not conform to， Anti-deletion， No automatic deletion for the time being")"
"# 0、删除转移记录": "# 0、 Deletion of transfer records"
"# 删除种子任务": "#  Deletion of seed tasks"
"# 1、直接删除源文件": "# 1、 Delete the source file directly"
"# 2、判断种子是否被删除完": "# 2、 Determine if a seed has been deleted"
"logger.error("删除种子失败，尝试删除源文件：%s" % str(e))": "logger.error(" Failed to delete seed， Try deleting the source file：%s" % str(e))"
"logger.info(f"同步删除 {msg} 完成！")": "logger.info(f" Synchronous deletion {msg}  Fulfillment！")"
"# 发送消息": "#  Send a message"
"# 根据tmdbid获取图片": "#  According totmdbid Get picture"
"torrent_cnt_msg += f"删除种子{del_cnt}个\n"": "torrent_cnt_msg += f" Delete seeds{del_cnt} Classifier for individual things or people, general, catch-all classifier\n""
"torrent_cnt_msg += f"暂停种子{stop_cnt}个\n"": "torrent_cnt_msg += f" Suspension of seeds{stop_cnt} Classifier for individual things or people, general, catch-all classifier\n""
"torrent_cnt_msg += f"删种失败{error_cnt}个\n"": "torrent_cnt_msg += f" Seed deletion failure{error_cnt} Classifier for individual things or people, general, catch-all classifier\n""
"# 发送通知": "#  Send notification"
"title="媒体库同步删除任务完成",": "title=" Media library synchronization deletion task completion","
"f"删除记录{len(transfer_history)}个\n"": "f" Deletion of records{len(transfer_history)} Classifier for individual things or people, general, catch-all classifier\n""
"f"时间 {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))}"": "f" Timing {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))}""
"# 读取历史记录": "#  Read history"
""type": "电影" if media_type == "Movie" or media_type == "MOV" else "电视剧",": ""type": " Cinematic" if media_type == "Movie" or media_type == "MOV" else " Dramas","
"# 保存历史": "#  Preserving history"
"查询转移记录": "Access to transfer records"
"# 季数": "#  Quarter"
"# 集数": "#  Episode number (of a tv series etc)"
"# 类型": "#  Typology"
"# 处理路径映射 (处理同一媒体多分辨率的情况)": "#  Handling path mapping ( Handling multiple resolutions of the same media)"
"# 删除电影": "#  Delete movie"
"msg = f'电影 {media_name} {tmdb_id}'": "msg = f' Cinematic {media_name} {tmdb_id}'"
"# 删除电视剧": "#  Delete tv series"
"msg = f'剧集 {media_name} {tmdb_id}'": "msg = f' Episode {media_name} {tmdb_id}'"
"# 删除季 S02": "#  Deletion of the season S02"
"logger.error(f"{media_name} 季同步删除失败，未获取到具体季")": "logger.error(f"{media_name}  Seasonal synchronization deletion failure， No specific season obtained")"
"msg = f'剧集 {media_name} S{season_num} {tmdb_id}'": "msg = f' Episode {media_name} S{season_num} {tmdb_id}'"
"# 删除剧集S02E02": "#  Delete episodeS02E02"
"logger.error(f"{media_name} 集同步删除失败，未获取到具体集")": "logger.error(f"{media_name}  Set synchronization deletion failure， No specific set obtained")"
"msg = f'剧集 {media_name} S{season_num}E{episode_num} {tmdb_id}'": "msg = f' Episode {media_name} S{season_num}E{episode_num} {tmdb_id}'"
"emby删除媒体库同步删除历史记录": "emby Delete media library synchronized delete history"
"日志方式": "Logging methods"
"# 读取历史记录": "#  Read history"
"# 媒体服务器类型，多个以,分隔": "#  Media server type， Many of, Segregation"
"# TODO plex解析日志": "# TODO plex Parsing logs"
"logger.error("未解析到已删除媒体信息")": "logger.error(" No resolution to deleted media messages")"
"# 遍历删除": "#  Iterative deletion"
"# 媒体类型 Movie|Series|Season|Episode": "#  Media type Movie|Series|Season|Episode"
"# 媒体名称 蜀山战纪": "#  Media name  Chronicles of shu shan"
"# 媒体年份 2015": "#  Year of media 2015"
"# 媒体路径 /data/series/国产剧/蜀山战纪 (2015)/Season 2/蜀山战纪 - S02E01 - 第1集.mp4": "#  Media path /data/series/ Nationalized drama/ Chronicles of shu shan (2015)/Season 2/ Chronicles of shu shan - S02E01 -  (prefix indicating ordinal number, e.g. first, number two etc)1 Classifier for sections of a tv series e.g. episode.mp4"
"# 季数 S02": "#  Quarter S02"
"# 集数 E02": "#  Episode number (of a tv series etc) E02"
"# 排除路径不处理": "#  Exclusion paths are not processed"
"logger.info(f"媒体路径 {media_path} 已被排除，暂不处理")": "logger.info(f" Media path {media_path}  Excluded， Withheld")"
"# 处理路径映射 (处理同一媒体多分辨率的情况)": "#  Handling path mapping ( Handling multiple resolutions of the same media)"
"# 获取删除的记录": "#  Getting deleted records"
"# 删除电影": "#  Delete movie"
"msg = f'电影 {media_name}'": "msg = f' Cinematic {media_name}'"
"# 删除电视剧": "#  Delete tv series"
"msg = f'剧集 {media_name}'": "msg = f' Episode {media_name}'"
"# 删除季 S02": "#  Deletion of the season S02"
"msg = f'剧集 {media_name} {media_season}'": "msg = f' Episode {media_name} {media_season}'"
"# 删除剧集S02E02": "#  Delete episodeS02E02"
"msg = f'剧集 {media_name} {media_season}{media_episode}'": "msg = f' Episode {media_name} {media_season}{media_episode}'"
"logger.info(f"正在同步删除 {msg}")": "logger.info(f" Deletions are being synchronized {msg}")"
"logger.info(f"未获取到 {msg} 转移记录")": "logger.info(f" Not available {msg}  Transfer records")"
"logger.info(f"获取到删除历史记录数量 {len(transfer_history)}")": "logger.info(f" Get the number of deleted history records {len(transfer_history)}")"
"# 开始删除": "#  Start deleting"
"f"当前转移记录 {transferhis.id} {title} {transferhis.tmdbid} 与删除媒体{media_name}不符，防误删，暂不自动删除")": "f" Current transfer records {transferhis.id} {title} {transferhis.tmdbid}  With the deletion of the media{media_name} Not conform to， Anti-deletion， No automatic deletion for the time being")"
"# 0、删除转移记录": "# 0、 Deletion of transfer records"
"# 删除种子任务": "#  Deletion of seed tasks"
"# 1、直接删除源文件": "# 1、 Delete the source file directly"
"# 2、判断种子是否被删除完": "# 2、 Determine if a seed has been deleted"
"logger.error("删除种子失败，尝试删除源文件：%s" % str(e))": "logger.error(" Failed to delete seed， Try deleting the source file：%s" % str(e))"
"logger.info(f"同步删除 {msg} 完成！")": "logger.info(f" Synchronous deletion {msg}  Fulfillment！")"
"# 发送消息": "#  Send a message"
"torrent_cnt_msg += f"删除种子{del_cnt}个\n"": "torrent_cnt_msg += f" Delete seeds{del_cnt} Classifier for individual things or people, general, catch-all classifier\n""
"torrent_cnt_msg += f"暂停种子{stop_cnt}个\n"": "torrent_cnt_msg += f" Suspension of seeds{stop_cnt} Classifier for individual things or people, general, catch-all classifier\n""
"torrent_cnt_msg += f"删种失败{error_cnt}个\n"": "torrent_cnt_msg += f" Seed deletion failure{error_cnt} Classifier for individual things or people, general, catch-all classifier\n""
"title="媒体库同步删除任务完成",": "title=" Media library synchronization deletion task completion","
"f"删除记录{len(transfer_history)}个\n"": "f" Deletion of records{len(transfer_history)} Classifier for individual things or people, general, catch-all classifier\n""
"f"时间 {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))}",": "f" Timing {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))}","
""type": "电影" if media_type == "Movie" else "电视剧",": ""type": " Cinematic" if media_type == "Movie" else " Dramas","
"# 保存历史": "#  Preserving history"
"判断种子是否局部删除": "Determine if a seed is partially deleted"
"局部删除则暂停种子": "Partial deletion suspends the seed"
"全部删除则删除种子": "Deleting them all removes the seeds"
"logger.info(f"查询到 {history_key} 转种历史 {transfer_history}")": "logger.info(f" Got it. {history_key}  History of transplants {transfer_history}")"
"# 删除本次种子记录": "#  Delete this seed record"
"# 根据种子hash查询所有下载器文件记录": "#  Based on seedhash Check all downloader file records"
"f"未查询到种子任务 {torrent_hash} 存在文件记录，未执行下载器文件同步或该种子已被删除")": "f" Seed missions not queried {torrent_hash}  Existence of documentary records， Downloader file synchronization not performed or the seed has been deleted")"
"# 查询未删除数": "#  Query undeleted count"
"f"查询种子任务 {torrent_hash} 存在 {no_del_cnt} 个未删除文件，执行暂停种子操作")": "f" Query seeding tasks {torrent_hash}  Remain {no_del_cnt}  Undeleted documents， Perform a pause seed operation")"
"f"查询种子任务 {torrent_hash} 文件已全部删除，执行删除种子操作")": "f" Query seeding tasks {torrent_hash}  All documents have been deleted.， Perform a delete seed operation")"
"# 如果有转种记录，则删除转种后的下载任务": "#  If there is a record of trans-species， Then delete the downloaded task after the transfer"
"# 删除种子": "#  Delete seeds"
"# 删除转种记录": "#  Deletion of records of trans-species"
"# 转种后未删除源种时，同步删除源种": "#  When source seed is not deleted after transfer， Synchronized deletion of source species"
"logger.info(f"{history_key} 转种时未删除源下载任务，开始删除源下载任务…")": "logger.info(f"{history_key}  Failure to remove source download tasks during replanting， Start deleting source download tasks…")"
"# 删除源种子": "#  Deletion of source seeds"
"logger.info(f"删除源下载器下载任务：{settings.DOWNLOADER} - {torrent_hash}")": "logger.info(f" Delete source downloader download task：{settings.DOWNLOADER} - {torrent_hash}")"
"# 删除转种后任务": "#  Delete post-transfer mission"
"logger.info(f"删除转种后下载任务：{download} - {download_id}")": "logger.info(f" Delete the post-transplant download task：{download} - {download_id}")"
"# 删除转种后下载任务": "#  Delete the post-transplant download task"
"# 暂停种子": "#  Suspension of seeds"
"# 转种后未删除源种时，同步暂停源种": "#  When source seed is not deleted after transfer， Synchronized suspension of source species"
"logger.info(f"{history_key} 转种时未删除源下载任务，开始暂停源下载任务…")": "logger.info(f"{history_key}  Failure to remove source download tasks during replanting， Start pausing source download tasks…")"
"# 暂停源种子": "#  Moratorium on source seeds"
"logger.info(f"暂停源下载器下载任务：{settings.DOWNLOADER} - {torrent_hash}")": "logger.info(f" Pause source downloader download task：{settings.DOWNLOADER} - {torrent_hash}")"
"# 未转种de情况": "#  Non-transplantedde State of affairs"
"# 删除源种子": "#  Deletion of source seeds"
"logger.info(f"删除源下载器下载任务：{download} - {download_id}")": "logger.info(f" Delete source downloader download task：{download} - {download_id}")"
"# 暂停源种子": "#  Moratorium on source seeds"
"logger.info(f"暂停源下载器下载任务：{download} - {download_id}")": "logger.info(f" Pause source downloader download task：{download} - {download_id}")"
"# 处理辅种": "#  Auxiliary species"
"logger.error(f"删种失败： {e}")": "logger.error(f" Seed deletion failure： {e}")"
"删除辅种": "Deletion of auxiliary species"
"# 查询是否有辅种记录": "#  Check if there is a record of auxiliary seeds"
"logger.info(f"查询到 {history_key} 辅种历史 {seed_history}")": "logger.info(f" Got it. {history_key}  Auxiliary species history {seed_history}")"
"# 有辅种记录则处理辅种": "#  Auxiliary seeds are processed if they are recorded"
"# 删除辅种历史中与本下载器相同的辅种记录": "#  Delete the same auxiliary species records in the auxiliary species history as this downloader."
"# 删除辅种": "#  Deletion of auxiliary species"
"logger.info(f"删除辅种：{downloader} - {torrent}")": "logger.info(f" Deletion of auxiliary species：{downloader} - {torrent}")"
"# 暂停辅种": "#  Suspension of auxiliary seeding"
"logger.info(f"辅种：{downloader} - {torrent} 暂停")": "logger.info(f" Auxiliary species：{downloader} - {torrent}  Pause (media player)")"
"# 删除辅种": "#  Deletion of auxiliary species"
"logger.info(f"删除辅种：{downloader} - {torrent}")": "logger.info(f" Deletion of auxiliary species：{downloader} - {torrent}")"
"# 暂停辅种": "#  Suspension of auxiliary seeding"
"logger.info(f"辅种：{downloader} - {torrent} 暂停")": "logger.info(f" Auxiliary species：{downloader} - {torrent}  Pause (media player)")"
"# 删除本下载器辅种历史": "#  Delete this downloader's auxiliary seed history"
"# 更新辅种历史": "#  Updating the history of auxiliary species"
"logger.error("获取emby日志失败，请检查服务器配置")": "logger.error(" Gainemby Log failure， Please check the server configuration")"
"# 正则解析删除的媒体信息": "#  Regular parsing of deleted media messages"
"# 循环获取媒体信息": "#  Cyclic access to media information"
"# 排除已处理的媒体信息": "#  Exclusion of processed media messages"
"logger.debug(f"解析到删除媒体：{json.dumps(media)}")": "logger.debug(f" Parsing to delete media：{json.dumps(media)}")"
"# 根据加入日期 降序排序": "#  Based on date of accession  Descending order"
"logger.error("获取jellyfin日志失败，请检查服务器配置")": "logger.error(" Gainjellyfin Log failure， Please check the server configuration")"
"# 正则解析删除的媒体信息": "#  Regular parsing of deleted media messages"
"# 循环获取媒体信息": "#  Cyclic access to media information"
"# 排除已处理的媒体信息": "#  Exclusion of processed media messages"
"logger.debug(f"解析到删除媒体：{json.dumps(media)}")": "logger.debug(f" Parsing to delete media：{json.dumps(media)}")"
"退出插件": "Exit plugin"
"logger.error("退出插件失败：%s" % str(e))": "logger.error(" Failed to exit the plugin：%s" % str(e))"
"下载文件删除处理事件": "Download file delete handling event"
"# 查询下载hash": "#  Inquiry downloadhash"
"logger.warn(f"未查询到文件 {src} 对应的下载记录")": "logger.warn(f" No documents were consulted {src}  Corresponding download records")"
