"实现站点签到的基类，所有站点签到类都需要继承此类，并实现match和signin方法": "Base class that implements site check-in， All site check-in classes need to inherit this class， Realizationmatch Cap (a poem)signin Methodologies"
"实现类放置到sitesignin目录下将会自动加载": "The implementation class is placed into thesitesignin Directory will automatically load the"
"# 匹配的站点Url，每一个实现类都需要设置为自己的站点Url": "#  Matching sitesUrl， Each implementation class needs to be set up as its own siteUrl"
"根据站点Url判断是否匹配当前站点签到类，大部分情况使用默认实现即可": "Based on siteUrl Determine if the current site check-in class matches， In most cases it is sufficient to use the default implementation"
":param url: 站点Url": ":param url:  WebsiteUrl"
":return: 是否匹配，如匹配则会调用该类的signin方法": ":return:  Whether or not it matches， If a match is made then the class'ssignin Methodologies"
"执行签到操作": "Perform check-in operations"
":param site_info: 站点信息，含有站点Url、站点Cookie、UA等信息": ":param site_info:  Site information， Contains siteUrl、 WebsiteCookie、UA And other information"
":return: True|False,签到结果信息": ":return: True|False, Check-in results information"
"获取页面源码": "Get page source code"
":param url: Url地址": ":param url: Url Address"
":param proxy: 是否使用代理": ":param proxy:  Whether to use a proxy"
":param render: 是否渲染": ":param render:  Whether to render"
":return: 页面源码，错误信息": ":return:  Page source code， Error message"
"# 使用chardet检测字符编码": "#  Utilizationchardet Detecting character encoding"
"# 解码为字符串": "#  Decode to string"
"logger.error(f"chardet解码失败：{e}")": "logger.error(f"chardet Failed to decode：{e}")"
"判断是否签到成功": "Determine if sign-in is successful"
