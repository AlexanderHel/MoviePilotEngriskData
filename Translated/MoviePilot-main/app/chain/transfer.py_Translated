"文件转移处理链": "Document transfer processing chain"
"获取下载器中的种子列表，并执行转移": "Get the list of seeds in the downloader， And execute the transfer"
"# 全局锁，避免重复处理": "#  Global lock， Avoiding duplication of processing"
"logger.info("开始执行下载器文件转移 ...")": "logger.info(" Begin executing downloader file transfers ...")"
"# 从下载器获取种子列表": "#  Get seed list from downloader"
"logger.info("没有获取到已完成的下载任务")": "logger.info(" Completed downloads not fetched")"
"logger.info(f"获取到 {len(torrents)} 个已完成的下载任务")": "logger.info(f" Get {len(torrents)}  Completed downloads")"
"# 查询下载记录识别情况": "#  Query download record recognition"
"# 类型": "#  Typology"
"# 按TMDBID识别": "#  Check or refer toTMDBID Recognize"
"# 非MoviePilot下载的任务，按文件识别": "#  In-MoviePilot Downloaded tasks， Identification by document"
"# 执行转移": "#  Execution transfer"
"# 设置下载任务状态": "#  Setting the status of a download task"
"# 结束": "#  Close"
"logger.info("下载器文件转移执行完成")": "logger.info(" Downloader file transfer execution complete")"
"执行一个复杂目录的转移操作": "Perform a complex directory transfer operation"
":param path: 待转移目录或文件": ":param path:  Directories or files to be transferred"
":param meta: 元数据": ":param meta:  Metadata"
":param mediainfo: 媒体信息": ":param mediainfo:  Media information"
":param download_hash: 下载记录hash": ":param download_hash:  Download recordhash"
":param target: 目标路径": ":param target:  Target path"
":param transfer_type: 转移类型": ":param transfer_type:  Type of transfer"
":param season: 季": ":param season:  Classifier for seasonal crop yield or seasons of a tv series"
":param epformat: 剧集格式": ":param epformat:  Episode format"
":param min_filesize: 最小文件大小(MB)": ":param min_filesize:  Minimum file size(MB)"
":param force: 是否强制转移": ":param force:  Compulsory transfer or not"
"返回：成功标识，错误信息": "Come (or go) back： Success story， Error message"
"# 获取待转移路径清单": "#  Obtaining a list of routes to be transferred"
"logger.warn(f"{path.name} 没有找到可转移的媒体文件")": "logger.warn(f"{path.name}  No transferable media files found")"
"return False, f"{path.name} 没有找到可转移的媒体文件"": "return False, f"{path.name}  No transferable media files found""
"# 有集自定义格式": "#  There are sets of customized formats"
"# 开始进度": "#  Initiation of progress"
"# 目录所有文件清单": "#  List of all documents in the catalog"
"# 有集自定义格式，过滤文件": "#  There are sets of customized formats， Filtering documents"
"# 汇总错误信息": "#  Aggregate error messages"
"# 总文件数": "#  Total number of documents"
"# 已处理数量": "#  Number processed"
"# 失败数量": "#  Number of failures"
"# 跳过数量": "#  Skip count"
"text=f"开始转移 {path}，共 {total_num} 个文件 ...",": "text=f" Commencement of transfer {path}， Common {total_num}  File ...","
"# 整理屏蔽词": "#  Organize blocked words"
"# 处理所有待转移目录或文件，默认一个转移路径或文件只有一个媒体信息": "#  Process all directories or files to be transferred， By default a transfer path or file has only one media message"
"# 汇总季集清单": "#  List of summary seasonal episodes"
"# 汇总元数据": "#  Aggregated metadata"
"# 汇总媒体信息": "#  Aggregated media information"
"# 汇总转移信息": "#  Aggregate transfer information"
"# 如果是目录且不是⼀蓝光原盘，获取所有文件并转移": "#  If it is a catalog and not⼀ Blu-ray disk， Get all files and transfer"
"# 遍历获取下载目录所有文件": "#  Iterate over all files in the download directory"
"# 有集自定义格式，过滤文件": "#  There are sets of customized formats， Filtering documents"
"# 转移所有文件": "#  Transfer of all documents"
"# 回收站及隐藏的文件不处理": "#  Recycle bin and hidden files not handled"
"logger.debug(f"{file_path_str} 是回收站或隐藏的文件")": "logger.debug(f"{file_path_str}  It's the recycle bin or hidden files")"
"# 计数": "#  Reckoning"
"# 整理屏蔽词不处理": "#  Sorting out blocked words not dealt with"
"logger.info(f"{file_path} 命中整理屏蔽词 {keyword}，不处理")": "logger.info(f"{file_path}  Hit listener's blocking words (computing) {keyword}， Not dealt with")"
"err_msgs.append(f"{file_path.name} 命中整理屏蔽词")": "err_msgs.append(f"{file_path.name}  Hit listener's blocking words (computing)")"
"# 计数": "#  Reckoning"
"# 转移成功的不再处理": "#  Successful transfers are no longer processed"
"logger.info(f"{file_path} 已成功转移过，如需重新处理，请删除历史记录。")": "logger.info(f"{file_path}  Successfully transferred， If reprocessing is required， Please delete the history。")"
"# 计数": "#  Reckoning"
"# 更新进度": "#  Update progress"
"text=f"正在转移 （{processed_num + 1}/{total_num}）{file_path.name} ...",": "text=f" Moving. （{processed_num + 1}/{total_num}）{file_path.name} ...","
"# 文件元数据": "#  Document metadata"
"# 合并季": "#  Merger season"
"logger.error(f"{file_path} 无法识别有效信息")": "logger.error(f"{file_path}  Unable to recognize valid information")"
"err_msgs.append(f"{file_path} 无法识别有效信息")": "err_msgs.append(f"{file_path}  Unable to recognize valid information")"
"# 计数": "#  Reckoning"
"# 自定义识别": "#  Custom recognition"
"# 开始集、结束集、PART": "#  Initial set、 Endgame、PART"
"# 识别媒体信息": "#  Identify media messages"
"logger.warn(f'{file_path} 未识别到媒体信息')": "logger.warn(f'{file_path}  No media messages recognized')"
"# 新增转移失败历史记录": "#  Added transfer failure history"
"title=f"{file_path.name} 未识别到媒体信息，无法入库！\n"": "title=f"{file_path.name}  No media messages recognized， Out of stock！\n""
"f"回复：```\n/redo {his.id} [tmdbid]|[类型]\n``` 手动识别转移。"": "f" Return (to a previous condition)：```\n/redo {his.id} [tmdbid]|[ Typology]\n```  Manual recognition transfer。""
"# 计数": "#  Reckoning"
"# 如果未开启新增已入库媒体是否跟随TMDB信息变化则根据tmdbid查询之前的title": "#  If not enabled does the new inbound media follow theTMDB Information changes are then based ontmdbid Query the previoustitle"
"logger.info(f"{file_path.name} 识别为：{file_mediainfo.type.value} {file_mediainfo.title_year}")": "logger.info(f"{file_path.name}  Identify as：{file_mediainfo.type.value} {file_mediainfo.title_year}")"
"# 更新媒体图片": "#  Updating media images"
"# 获取集数据": "#  Get set data"
"# 获取下载hash": "#  Get downloadhash"
"# 执行转移": "#  Execution transfer"
"logger.error("文件转移模块运行失败")": "logger.error(" Failure to run the file transfer module")"
"return False, "文件转移模块运行失败"": "return False, " Failure to run the file transfer module""
"# 转移失败": "#  Transfer failure"
"logger.warn(f"{file_path.name} 入库失败：{transferinfo.message}")": "logger.warn(f"{file_path.name}  Failure to stock：{transferinfo.message}")"
"# 新增转移失败历史记录": "#  Added transfer failure history"
"# 发送消息": "#  Send a message"
"title=f"{file_mediainfo.title_year} {file_meta.season_episode} 入库失败！",": "title=f"{file_mediainfo.title_year} {file_meta.season_episode}  Failure to stock！","
"text=f"原因：{transferinfo.message or '未知'}",": "text=f" Rationale：{transferinfo.message or ' Uncharted'}","
"# 计数": "#  Reckoning"
"# 汇总信息": "#  Summary information"
"# 新增信息": "#  New information"
"# 合并季集清单": "#  Consolidated list of quarterly collections"
"# 合并转移数据": "#  Consolidation of transfer data"
"# 新增转移成功历史记录": "#  Add transfer success history"
"# 刮削单个文件": "#  Scraping of individual documents"
"# 更新进度": "#  Update progress"
"text=f"{file_path.name} 转移完成",": "text=f"{file_path.name}  Transfer completed","
"# 目录或文件转移完成": "#  Directory or file transfer complete"
"self.progress.update(text=f"{trans_path} 转移完成，正在执行后续处理 ...",": "self.progress.update(text=f"{trans_path}  Transfer completed， Follow-up being implemented ...","
"# 执行后续处理": "#  Implementation follow-up"
"# 媒体目录": "#  Media catalog"
"# 刷新媒体库，根目录或季目录": "#  Refresh media library， Root or quarter directory"
"# 发送通知": "#  Send notification"
"# 广播事件": "#  Broadcasting incident"
"# 结束进度": "#  Conclusion of progress"
"logger.info(f"{path} 转移完成，共 {total_num} 个文件，"": "logger.info(f"{path}  Transfer completed， Common {total_num}  File，""
"f"失败 {fail_num} 个，跳过 {skip_num} 个")": "f" Fail (e.g. experiments) {fail_num}  Classifier for individual things or people, general, catch-all classifier， Skip over {skip_num}  Classifier for individual things or people, general, catch-all classifier")"
"text=f"{path} 转移完成，共 {total_num} 个文件，"": "text=f"{path}  Transfer completed， Common {total_num}  File，""
"f"失败 {fail_num} 个，跳过 {skip_num} 个",": "f" Fail (e.g. experiments) {fail_num}  Classifier for individual things or people, general, catch-all classifier， Skip over {skip_num}  Classifier for individual things or people, general, catch-all classifier","
"获取转移目录列表": "Get a list of transfer catalogs"
"logger.warn(f"目录不存在：{directory}")": "logger.warn(f" Catalog does not exist：{directory}")"
"# 单文件": "#  Single document"
"# 蓝光原盘": "#  Blu-ray disk"
"# 需要转移的路径列表": "#  List of paths to be transferred"
"# 先检查当前目录的下级目录，以支持合集的情况": "#  First check the current directory's lower level directories， To support the case of ensembles"
"# 如果是蓝光原盘": "#  If it's the original blu-ray"
"# 没有媒体文件的目录跳过": "#  Directories without media files are skipped"
"# 没有有效子目录，直接转移当前目录": "#  No valid subdirectories， Direct transfer of the current directory"
"# 有子目录时，把当前目录的文件添加到转移任务中": "#  When there are subdirectories， Add files from the current directory to the transfer task"
"远程重新转移，参数 历史记录ID TMDBID|类型": "Remote retransfer， Parameters  Historical recordID TMDBID| Typology"
"title="请输入正确的命令格式：/redo [id] [tmdbid]|[类型]，"": "title=" Please enter the correct command format：/redo [id] [tmdbid]|[ Typology]，""
""[id]历史记录编号", userid=userid))": ""[id] Historical record number", userid=userid))"
"# 历史记录ID": "#  Historical recordID"
"# 类型": "#  Typology"
"self.post_message(Notification(channel=channel, title="手动整理失败",": "self.post_message(Notification(channel=channel, title=" Failed to organize manually","
"根据历史记录，重新识别转移，只处理对应的src目录": "Based on historical records， Re-identification transfer， Only process the correspondingsrc Catalogs"
":param logid: 历史记录ID": ":param logid:  Historical recordID"
":param mtype: 媒体类型": ":param mtype:  Media type"
"# 查询历史记录": "#  Query history"
"logger.error(f"历史记录不存在，ID：{logid}")": "logger.error(f" History does not exist，ID：{logid}")"
"return False, "历史记录不存在"": "return False, " History does not exist""
"# 没有下载记录，按源目录路径重新转移": "#  No download history， Re-transfer by source directory path"
"return False, f"源目录不存在：{src_path}"": "return False, f" Source directory does not exist：{src_path}""
"# 查询媒体信息": "#  Search for media information"
"return False, f"未识别到媒体信息，类型：{mtype.value}，tmdbid：{tmdbid}"": "return False, f" No media messages recognized， Typology：{mtype.value}，tmdbid：{tmdbid}""
"# 重新执行转移": "#  Re-implementation of transfers"
"logger.info(f"{src_path.name} 识别为：{mediainfo.title_year}")": "logger.info(f"{src_path.name}  Identify as：{mediainfo.title_year}")"
"# 更新媒体图片": "#  Updating media images"
"# 删除旧的已整理文件": "#  Deleting old organized files"
"# 强制转移": "#  Forcible transfer"
"手动转移": "Manual transfer"
":param in_path: 源文件路径": ":param in_path:  Source file path"
":param target: 目标路径": ":param target:  Target path"
":param mtype: 媒体类型": ":param mtype:  Media type"
":param season: 季度": ":param season:  Season (sports)"
":param transfer_type: 转移类型": ":param transfer_type:  Type of transfer"
":param epformat: 剧集格式": ":param epformat:  Episode format"
":param min_filesize: 最小文件大小(MB)": ":param min_filesize:  Minimum file size(MB)"
"logger.info(f"手动转移：{in_path} ...")": "logger.info(f" Manual transfer：{in_path} ...")"
"# 有输入TMDBID时单个识别": "#  InputtedTMDBID Time interval recognition"
"# 识别媒体信息": "#  Identify media messages"
"return False, f"媒体信息识别失败，tmdbid: {tmdbid}, type: {mtype.value}"": "return False, f" Media message recognition failure，tmdbid: {tmdbid}, type: {mtype.value}""
"# 开始进度": "#  Initiation of progress"
"text=f"开始转移 {in_path} ...",": "text=f" Commencement of transfer {in_path} ...","
"# 开始转移": "#  Commencement of transfer"
"logger.info(f"{in_path} 转移完成")": "logger.info(f"{in_path}  Transfer completed")"
"# 没有输入TMDBID时，按文件识别": "#  No inputTMDBID Hour， Identification by document"
"发送入库成功的消息": "Send inbound success message"
"msg_title = f"{mediainfo.title_year} {meta.season_episode if not season_episode else season_episode} 已入库"": "msg_title = f"{mediainfo.title_year} {meta.season_episode if not season_episode else season_episode}  In stock""
"msg_str = f"评分：{mediainfo.vote_average}，类型：{mediainfo.type.value}"": "msg_str = f" Score (of student's work)：{mediainfo.vote_average}， Typology：{mediainfo.type.value}""
"msg_str = f"类型：{mediainfo.type.value}"": "msg_str = f" Typology：{mediainfo.type.value}""
"msg_str = f"{msg_str}，类别：{mediainfo.category}"": "msg_str = f"{msg_str}， Form：{mediainfo.category}""
"msg_str = f"{msg_str}，质量：{meta.resource_term}"": "msg_str = f"{msg_str}， Mass (in physics)：{meta.resource_term}""
"msg_str = f"{msg_str}，共{transferinfo.file_count}个文件，" \": "msg_str = f"{msg_str}， Common{transferinfo.file_count} File，" \"
"f"大小：{StringUtils.str_filesize(transferinfo.total_size)}"": "f" Adults and children：{StringUtils.str_filesize(transferinfo.total_size)}""
"msg_str = f"{msg_str}，以下文件处理失败：\n{transferinfo.message}"": "msg_str = f"{msg_str}， The following files failed to be processed：\n{transferinfo.message}""
"# 发送": "#  Dispatch"
"删除转移后的文件以及空目录": "Delete transferred files and empty directories"
":param path: 文件路径": ":param path:  File path"
"logger.info(f"开始删除文件以及空目录：{path} ...")": "logger.info(f" Start deleting files and empty directories：{path} ...")"
"# 删除文件、nfo、jpg等同名文件": "#  Delete file、nfo、jpg And other documents of the same name"
"logger.warn(f"文件 {path} 已删除")": "logger.warn(f" File {path}  Deleted")"
"# 需要删除父目录": "#  Parent directory needs to be deleted"
"# 根目录，不删除": "#  Root directory， Non-deletion"
"logger.warn(f"根目录 {path} 不能删除！")": "logger.warn(f" Root directory {path}  Cannot be deleted！")"
"# 非根目录，才删除目录": "#  Non-root directory， Just deleted the directory."
"# 删除目录": "#  Delete catalog"
"logger.warn(f"目录 {path} 已删除")": "logger.warn(f" Catalogs {path}  Deleted")"
"# 需要删除父目录": "#  Parent directory needs to be deleted"
"# 判断当前媒体父路径下是否有媒体文件，如有则无需遍历父级": "#  Determine if there is a media file under the current media parent path， There is no need to traverse the parent if"
"# 媒体库二级分类根路径": "#  Root path for secondary categorization of media libraries"
"settings.LIBRARY_MOVIE_NAME or '电影',": "settings.LIBRARY_MOVIE_NAME or ' Cinematic',"
"settings.LIBRARY_TV_NAME or '电视剧',": "settings.LIBRARY_TV_NAME or ' Dramas',"
"settings.LIBRARY_ANIME_NAME or '动漫',": "settings.LIBRARY_ANIME_NAME or ' Cartoons and comics',"
"# 判断父目录是否为空, 为空则删除": "#  Determine if the parent directory is empty,  Delete if empty"
"# 遍历父目录到媒体库二级分类根路径": "#  Iterate the parent directory to the root path of the media library secondary category"
"# 父目录非根目录，才删除父目录": "#  Parent directory is not the root directory， Before deleting the parent directory."
"# 当前路径下没有媒体文件则删除": "#  Delete if there are no media files in the current path"
"logger.warn(f"目录 {parent_path} 已删除")": "logger.warn(f" Catalogs {parent_path}  Deleted")"
