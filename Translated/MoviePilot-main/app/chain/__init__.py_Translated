"处理链基类": "Processing chain base class"
"公共初始化": "Public initialization"
"从本地加载缓存": "Load cache from local"
"logger.error(f"加载缓存 {filename} 出错：{err}")": "logger.error(f" Load cache {filename}  Make a mistake：{err}")"
"保存缓存到本地": "Save cache locally"
"logger.error(f"保存缓存 {filename} 出错：{err}")": "logger.error(f" Save cache {filename}  Make a mistake：{err}")"
"# 主动资源回收": "#  Proactive resource recovery"
"运行包含该方法的所有模块，然后返回结果": "Run all modules that contain this method， Then return the result"
"判断结果是否为空": "Determine if the result is null"
"logger.debug(f"请求模块执行：{method} ...")": "logger.debug(f" Request module execution：{method} ...")"
"# 返回None，第一次执行或者需继续执行下一模块": "#  Return None， First implementation or need to continue to the next module"
"# 返回结果与方法签名一致，将结果传入（不能多个模块同时运行的需要通过开关控制）": "#  The return result is consistent with the method signature， Pass the results into the（ Cannot run multiple modules at the same time need to be controlled by a switch）"
"# 返回为列表，有多个模块运行结果时进行合并（不能多个模块同时运行的需要通过开关控制）": "#  Return to list， Merge the results of multiple module runs（ Cannot run multiple modules at the same time need to be controlled by a switch）"
"# 中止继续执行": "#  Suspension of continuation"
"logger.error(f"运行模块 {method} 出错：{module.__class__.__name__} - {err}\n{traceback.print_exc()}")": "logger.error(f" Runtime module {method}  Make a mistake：{module.__class__.__name__} - {err}\n{traceback.print_exc()}")"
"识别媒体信息": "Identify media messages"
":param meta:     识别的元数据": ":param meta:      Identified metadata"
":param mtype:    识别的媒体类型，与tmdbid配套": ":param mtype:     Types of media identified， Compatible with TMDBID"
":return: 识别的媒体信息，包括剧集信息": ":return:  Identified media messages， Includes episode information"
"搜索和匹配豆瓣信息": "Search and match douban information"
":param name: 标题": ":param name:  Title"
":param mtype: 类型": ":param mtype:  Type"
":param year: 年份": ":param year:  Year"
":param season: 季": ":param season:  Season"
"补充抓取媒体信息图片": "Supplemental grabbing of media information images"
":param mediainfo:  识别的媒体信息": ":param mediainfo:   Identified media messages"
":return: 更新后的媒体信息": ":return:  Updated media information"
"获取指定媒体信息图片，返回图片地址": "Get the specified media information image， Return to image address"
":param mediaid:     媒体ID": ":param mediaid:      Media ID"
":param mtype:       媒体类型": ":param mtype:        Media type"
":param image_type:  图片类型": ":param image_type:   Image type"
":param image_prefix: 图片前缀": ":param image_prefix:  Image prefix"
":param season:      季": ":param season:       Classifier for seasonal crop yield or seasons of a tv series"
":param episode:     集": ":param episode:      Classifier for sections of a tv series e.g. episode"
"获取豆瓣信息": "Get Douban information"
":param doubanid: 豆瓣ID": ":param doubanid:  Douban ID"
":return: 豆瓣信息": ":return:  Douban information"
"获取TVDB信息": "Get TVDB information"
":return: TVDB信息": ":return: TVDB information"
"获取TMDB信息": "Get TVDB information"
":param mtype:  媒体类型": ":param mtype:   Media type"
":return: TVDB信息": ":return: TVDB information"
"解析消息内容，返回字典，注意以下约定值：": "Parsing message content， Return to dictionary， Note the following convention values："
"userid: 用户ID": "userid:  User ID"
"username: 用户名": "username:  Username"
"text: 内容": "text:  Element"
":param body: 请求体": ":param body:  Request"
":param form: 表单": ":param form:  Form"
":param args: 参数": ":param args:  Parameters"
":return: 消息渠道、消息内容": ":return:  News channel、 Message"
"解析Webhook报文体": "Analyze webhook newspapers"
":param body:  请求体": ":param body:   Requestor"
":param form:  请求表单": ":param form:   Request form"
":param args:  请求参数": ":param args:   Request parameters"
":return: 字典，解析为消息时需要包含：title、text、image": ":return:  Dictionaries， Parsing into a message requires the inclusion of the：title、text、image"
"搜索媒体信息": "Search for media information"
":param meta:  识别的元数据": ":param meta:   Identified metadata"
":reutrn: 媒体信息列表": ":reutrn:  Media information list"
"搜索一个站点的种子资源": "Searching a site for seed resources"
":param site:  站点": ":param site:   Website"
":param keywords:  搜索关键词列表": ":param keywords:   Search keyword list"
":param mtype:  媒体类型": ":param mtype:   Media type"
":param page:  页码": ":param page:   Pagination"
":reutrn: 资源列表": ":reutrn:  Resource list"
"获取站点最新一页的种子，多个站点需要多线程处理": "Get seeds for the latest page of the site， Multiple sites require multithreading"
":param site:  站点": ":param site:   Website"
":reutrn: 种子资源列表": ":reutrn:  List of seed resources"
"过滤种子资源": "Filtering seed resources"
":param rule_string:  过滤规则": ":param rule_string:   Filter rules"
":param torrent_list:  资源列表": ":param torrent_list:   Resource list"
":param season_episodes:  季集数过滤 {season:[episodes]}": ":param season_episodes:   Season episode filter {season:[episodes]}"
":param mediainfo:  识别的媒体信息": ":param mediainfo:   Identified media messages"
":return: 过滤后的资源列表，添加资源优先级": ":return:  Filtered resource list， Add resource prioritization"
"根据种子文件，选择并添加下载任务": "Based on seed documents， Select and add a download task"
":param content:  种子文件地址或者磁力链接": ":param content:   Seed file address or magnet link"
":param download_dir:  下载目录": ":param download_dir:   Download catalog"
":param episodes:  需要下载的集数": ":param episodes:   Number of episodes to download"
":param category:  种子分类": ":param category:   Seed classification"
":return: 种子Hash，错误信息": ":return:  TorrentHash， Error message"
"添加下载任务成功后，从站点下载字幕，保存到下载目录": "After adding a successful download task， Download subtitles from the site， Save to download directory"
":param context:  上下文，包括识别信息、媒体信息、种子信息": ":param context:   The context, including identification information, media information, seed information"
":param download_dir:  下载目录": ":param download_dir:   Download catalog"
":param torrent_path:  种子文件地址": ":param torrent_path:   Seed file address"
":return: None，该方法可被多个模块同时处理": ":return: None， This method can be processed by multiple modules simultaneously"
"获取下载器种子列表": "Get downloader seed list"
":param status:  种子状态": ":param status:   Seed state"
":param hashs:  种子Hash": ":param hashs:   Torrent Hash"
":return: 下载器中符合状态的种子列表": ":return:  List of seeds in the downloader that match the status"
"文件转移": "File transfer"
":param path:  文件路径": ":param path:   File path"
":param meta: 预识别的元数据": ":param meta:  Pre-identified metadata"
":param mediainfo:  识别的媒体信息": ":param mediainfo:   Identified media messages"
":param transfer_type:  转移模式": ":param transfer_type:   Transfer mode"
":param target:  转移目标路径": ":param target:   Transfer of target paths"
":param episodes_info: 当前季的全部集信息": ":param episodes_info:  All episode information for the current season"
"转移完成后的处理": "Disposal upon completion of the transfer"
":param hashs:  种子Hash": ":param hashs:   Torrent Hash"
":param path:  源目录": ":param path:   Source catalog"
"删除下载器种子": "Delete downloader seeds"
":param hashs:  种子Hash": ":param hashs:   Torrent Hash"
"开始下载": "Start download"
":param hashs:  种子Hash": ":param hashs:   Torrent Hash"
"停止下载": "Stop downloading"
":param hashs:  种子Hash": ":param hashs:   Torrent Hash"
"获取种子文件": "Getting the seed file"
":param tid:  种子Hash": ":param tid:   Torrent Hash"
":return: 种子文件": ":return:  Seed file"
"判断媒体文件是否存在": "Determine if a media file exists"
":param mediainfo:  识别的媒体信息": ":param mediainfo:   Identified media messages"
":param itemid:  媒体服务器ItemID": ":param itemid:   Media server ItemId"
":return: 如不存在返回None，存在时返回信息，包括每季已存在所有集{type: movie/tv, seasons: {season: [episodes]}}": ":return:  Returns if not present None， Return information when present， Includes all existing episodes of each season{type: movie/tv, seasons: {season: [episodes]}}"
"刷新媒体库": "Refresh media library"
":param mediainfo:  识别的媒体信息": ":param mediainfo:   Identified media messages"
":param file_path:  文件路径": ":param file_path:   File path"
":return: 成功或失败": ":return:  Success or failure"
"发送消息": "Send a message"
":param message:  消息体": ":param message:   Message body"
":return: 成功或失败": ":return:  Success or failure"
"# 发送事件": "#  Send event"
"logger.info(f"发送消息：channel={message.channel}，"": "logger.info(f" Send a message：channel={message.channel}，""
"发送媒体信息选择列表": "Send media message selection list"
":param message:  消息体": ":param message:   Message body"
":param medias:  媒体列表": ":param medias:   Media list"
":return: 成功或失败": ":return:  Success or failure"
"发送种子信息选择列表": "Send seed message selection list"
":param message:  消息体": ":param message:   Message body"
":param torrents:  种子列表": ":param torrents:   Seed list"
":return: 成功或失败": ":return:  Success or failure"
"刮削元数据": "Scraping metadata"
":param path: 媒体文件路径": ":param path:  Media file path"
":param mediainfo:  识别的媒体信息": ":param mediainfo:   Identified media messages"
":return: 成功或失败": ":return:  Success or failure"
"注册菜单命令": "Registration menu commands"
"定时任务，每10分钟调用一次，模块实现该接口以实现定时服务": "Timed task， Each10 One call per minute， Module implements this interface to implement a timed service"
"清理缓存，模块实现该接口响应清理缓存事件": "Clearing the cache， The module implements this interface in response to a clear cache event"
