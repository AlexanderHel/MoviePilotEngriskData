"基于 [NAStool](https://github.com/NAStool/nas-tools) 部分代码重新设计，聚焦自动化核心需求，减少问题同时更易于扩展和维护。": "[NAStool](https://github.com/NAStool/nas-tools)  On the basis of， Partial code redesign， Focus on core automation needs。
 Reduce problems while making it easier to expand and maintain"
"# 仅用于学习交流使用，请勿在任何国内平台宣传该项目！": "#  For study and communication purposes only， Do not publicize the project on any domestic platform！"
"发布频道：https://t.me/moviepilot_channel": "：https://t.me/moviepilot_channel
 Publishing channel"
"## 主要特性": "##  Main characteristics"
"- 前后端分离，基于FastApi + Vue3，前端项目地址：[MoviePilot-Frontend](https://github.com/jxxghp/MoviePilot-Frontend)": "-  Front-end and back-end separation， On the basis ofFastApi + Vue3， Front-end project address：[MoviePilot-Frontend](https://github.com/jxxghp/MoviePilot-Frontend)"
"- 聚焦核心需求，简化功能和设置，部分设置项可直接使用默认值。": "-  Focus on core needs， Simplified functionality and setup， Some settings can be used directly with default values。"
"- 重新设计了用户界面，更加美观易用。": "-  Redesigned user interface， More beautiful and easy to use。"
"## 安装": "##  Mounting"
"1. **安装CookieCloud插件**": "1. ** MountingCookieCloud Plug-in (software component)**"
"站点信息需要通过CookieCloud同步获取，因此需要安装CookieCloud插件，将浏览器中的站点Cookie数据同步到云端后再同步到MoviePilot使用。 插件下载地址请点击 [这里](https://github.com/easychen/CookieCloud/releases)。": "CookieCloud Site information needs to be passed through the， Synchronized acquisitionCookieCloud Therefore it is necessary to install， Plug-in (software component)Cookie Place the site in the browserMoviePilot The data is synchronized to the cloud and then to the。  Utilization [ Plugin download address please click](https://github.com/easychen/CookieCloud/releases)。
 Here are"
"2. **安装CookieCloud服务端（可选）**": "2. ** MountingCookieCloud Server-side（ Selectable）**"
"MoviePilot内置了公共CookieCloud服务器，如果需要自建服务，可参考 [CookieCloud](https://github.com/easychen/CookieCloud) 项目进行搭建，docker镜像请点击 [这里](https://hub.docker.com/r/easychen/cookiecloud)。": "MoviePilot Built-in publicCookieCloud Server (computer)， If self-built services are required， Referable [CookieCloud](https://github.com/easychen/CookieCloud)  Project to build，docker For mirrors, please click [ Here are](https://hub.docker.com/r/easychen/cookiecloud)。"
"**声明：** 本项目不会收集用户敏感数据，Cookie同步也是基于CookieCloud项目实现，非本项目提供的能力。技术角度上CookieCloud采用端到端加密，在个人不泄露`用户KEY`和`端对端加密密码`的情况下第三方无法窃取任何用户信息（包括服务器持有者）。如果你不放心，可以不使用公共服务或者不使用本项目，但如果使用后发生了任何信息泄露与本项目无关！": "** Herald：**  This program does not collect sensitive user data，Cookie Synchronization is also based onCookieCloud Project realization， Capabilities not provided by the project。 From a technical point of viewCookieCloud Using end-to-end encryption， Without personal disclosure` SubscribersKEY` Cap (a poem)` End-to-end encrypted passwords` The third party is unable to steal any user information in the event of a breach of contract.（ Including server holders）。 If you're not comfortable， May not use public services or may not use the program， However, if any information leakage occurs after use, the program has nothing to do with it.！"
"3. **安装配套管理软件**": "3. ** Installation of supporting management software**"
"MoviePilot需要配套下载器和媒体服务器配合使用。": "MoviePilot Requires a companion downloader and media server。"
"- 下载器支持：qBittorrent、Transmission，QB版本号要求>= 4.3.9，TR版本号要求>= 3.0，推荐使用QB。": "-  Downloader support：qBittorrent、Transmission，QB Version number requirements>= 4.3.9，TR Version number requirements>= 3.0， RecommendedQB。"
"- 媒体服务器支持：Jellyfin、Emby、Plex，推荐使用Emby。": "-  Media server support：Jellyfin、Emby、Plex， RecommendedEmby。"
"4. **安装MoviePilot**": "4. ** MountingMoviePilot**"
"目前仅提供docker镜像，点击 [这里](https://hub.docker.com/r/jxxghp/moviepilot) 或执行命令：": "docker Currently only available， Mirroring [ Strike (on the keyboard)](https://hub.docker.com/r/jxxghp/moviepilot)  Here are：
 Or execute a command"
"## 配置": "##  Configure"
"项目的所有配置均通过环境变量进行设置，支持两种配置方式：": "， All configurations of the project are set via environment variables：
 Two configuration methods are supported"
"1. 在docker环境变量部分进行参数配置，部分环境建立容器后会自动显示待配置项，如未自动显示配置项则需要手动增加对应环境变量。": "1.  Existdocker Environment variables section for parameter configuration， Some environments automatically display pending configuration items after the container is created， If the configuration items are not displayed automatically, you need to add the corresponding environment variables manually.。"
"2. 下载 [app.env](https://github.com/jxxghp/MoviePilot/raw/main/config/app.env) 文件，修改好配置后放置到配置文件映射路径根目录，配置项可根据说明自主增减。": "2.  Downloading [app.env](https://github.com/jxxghp/MoviePilot/raw/main/config/app.env)  File， Modify the configuration and place it in the root directory of the configuration file mapping path.， Configuration items can be added or subtracted independently according to the description。"
"配置文件映射路径：`/config`，配置项生效优先级：环境变量 > env文件 > 默认值，部分参数如路径映射、站点认证、权限端口等必须通过环境变量进行配置。": "：`/config`， Configuration file mapping path： Configuration item effective priority > env Environment variable >  File， Default value、 Some parameters such as path mapping、 Site certification。
 Permission ports, etc. must be configured via environment variables"
"### 1. **基础设置**": "### 1. ** Basic settings**"
"- **PUID**：运行程序用户的`uid`，默认`0`（仅支持环境变量配置）": "- **PUID**： Run the program user's`uid`， Default (setting)`0`（ Only environment variable configuration is supported）"
"- **PGID**：运行程序用户的`gid`，默认`0`（仅支持环境变量配置）": "- **PGID**： Run the program user's`gid`， Default (setting)`0`（ Only environment variable configuration is supported）"
"- **UMASK**：掩码权限，默认`000`，可以考虑设置为`022`（仅支持环境变量配置）": "- **UMASK**： Mask authority， Default (setting)`000`， Consider setting it to`022`（ Only environment variable configuration is supported）"
"- **MOVIEPILOT_AUTO_UPDATE**：重启更新，`true`/`false`，默认`true` **注意：如果出现网络问题可以配置`PROXY_HOST`，具体看下方`PROXY_HOST`解释**（仅支持环境变量配置）": "- **MOVIEPILOT_AUTO_UPDATE**： Restart sth. to update it，`true`/`false`， Default (setting)`true` ** Take note of： If there are network problems you can configure`PROXY_HOST`， See below for details`PROXY_HOST` Account for**（ Only environment variable configuration is supported）"
"- **MOVIEPILOT_AUTO_UPDATE_DEV**：重启时更新到未发布的开发版本代码，`true`/`false`，默认`false`（仅支持环境变量配置）": "- **MOVIEPILOT_AUTO_UPDATE_DEV**： Update to unreleased development version code on reboot，`true`/`false`， Default (setting)`false`（ Only environment variable configuration is supported）"
"- **NGINX_PORT：** WEB服务端口，默认`3000`，可自行修改，不能与API服务端口冲突（仅支持环境变量配置）": "- **NGINX_PORT：** WEB Service port， Default (setting)`3000`， Modifiable， Cannot be combined withAPI Service port conflict（ Only environment variable configuration is supported）"
"- **PORT：** API服务端口，默认`3001`，可自行修改，不能与WEB服务端口冲突（仅支持环境变量配置）": "- **PORT：** API Service port， Default (setting)`3001`， Modifiable， Cannot be combined withWEB Service port conflict（ Only environment variable configuration is supported）"
"- **SUPERUSER：** 超级管理员用户名，默认`admin`，安装后使用该用户登录后台管理界面": "- **SUPERUSER：**  Super administrator user name， Default (setting)`admin`， Use this user to log in to the backend administration interface after installation"
"- **SUPERUSER_PASSWORD：** 超级管理员初始密码，默认`password`，建议修改为复杂密码": "- **SUPERUSER_PASSWORD：**  Super administrator initial password， Default (setting)`password`， It is recommended to change to a complex password"
"- **API_TOKEN：** API密钥，默认`moviepilot`，在媒体服务器Webhook、微信回调等地址配置中需要加上`?token=`该值，建议修改为复杂字符串": "- **API_TOKEN：** API Keys， Default (setting)`moviepilot`， In the media serverWebhook、 Address configurations such as microsoft callbacks need to be added to the`?token=` This value， Suggested changes to complex strings"
"- **PROXY_HOST：** 网络代理（可选），访问themoviedb或者重启更新需要使用代理访问，格式为`http(s)://ip:port`": "- **PROXY_HOST：**  Network agent（ Selectable）， Interviewsthemoviedb Or reboot updates require proxy access， Format`http(s)://ip:port`"
"- **TMDB_API_DOMAIN：** TMDB API地址，默认`api.themoviedb.org`，也可配置为`api.tmdb.org`或其它中转代理服务地址，能连通即可": "- **TMDB_API_DOMAIN：** TMDB API Address， Default (setting)`api.themoviedb.org`， It can also be configured as`api.tmdb.org` Or other transit agency service address， It's just a matter of being able to connect."
"- **DOWNLOAD_PATH：** 下载保存目录，**注意：需要将`moviepilot`及`下载器`的映射路径保持一致**，否则会导致下载文件无法转移": "- **DOWNLOAD_PATH：**  Download save directory，** Take note of： Require`moviepilot` Up to` Downloader` The mapping paths are consistent with the**， Failure to do so will result in the download file not being transferred"
"- **DOWNLOAD_MOVIE_PATH：** 电影下载保存目录，不设置则下载到`DOWNLOAD_PATH`": "- **DOWNLOAD_MOVIE_PATH：**  Movie download save directory， If you don't set it, it will be downloaded to the`DOWNLOAD_PATH`"
"- **DOWNLOAD_TV_PATH：** 电视剧下载保存目录，不设置则下载到`DOWNLOAD_PATH`": "- **DOWNLOAD_TV_PATH：**  Tv show download save directory， If you don't set it, it will be downloaded to the`DOWNLOAD_PATH`"
"- **DOWNLOAD_ANIME_PATH：** 动漫下载保存目录，不设置则下载到`DOWNLOAD_PATH`": "- **DOWNLOAD_ANIME_PATH：**  Anime download save directory， If you don't set it, it will be downloaded to the`DOWNLOAD_PATH`"
"- **DOWNLOAD_CATEGORY：** 下载二级分类开关，`true`/`false`，默认`false`，开启后会根据配置 [category.yaml](https://github.com/jxxghp/MoviePilot/raw/main/config/category.yaml) 自动在下载目录下建立二级目录分类": "- **DOWNLOAD_CATEGORY：**  Download secondary category switch，`true`/`false`， Default (setting)`false`， When turned on it will be configured according to the [category.yaml](https://github.com/jxxghp/MoviePilot/raw/main/config/category.yaml)  Automatically create secondary catalog categories in the download directory"
"- **DOWNLOAD_SUBTITLE：** 下载站点字幕，`true`/`false`，默认`true`": "- **DOWNLOAD_SUBTITLE：**  Download site subtitles，`true`/`false`， Default (setting)`true`"
"- **REFRESH_MEDIASERVER：** 入库刷新媒体库，`true`/`false`，默认`true`": "- **REFRESH_MEDIASERVER：**  Inbound refresh media library，`true`/`false`， Default (setting)`true`"
"- **SCRAP_METADATA：** 刮削入库的媒体文件，`true`/`false`，默认`true`": "- **SCRAP_METADATA：**  Scraping incoming media files，`true`/`false`， Default (setting)`true`"
"- **SCRAP_FOLLOW_TMDB：** 新增已入库媒体是否跟随TMDB信息变化，`true`/`false`，默认`true`": "- **SCRAP_FOLLOW_TMDB：**  Add whether or not the deposited media followsTMDB Changes in information，`true`/`false`， Default (setting)`true`"
"- **TORRENT_TAG：** 种子标签，默认为`MOVIEPILOT`，设置后只有MoviePilot添加的下载才会处理，留空所有下载器中的任务均会处理": "- **TORRENT_TAG：**  Seed labels， Default`MOVIEPILOT`， After setting up onlyMoviePilot Added downloads are only processed， Leave all tasks in the downloader empty will be processed."
"- **LIBRARY_PATH：** 媒体库目录，多个目录使用`,`分隔": "- **LIBRARY_PATH：**  Media library catalog， Multiple directory use`,` Segregation"
"- **LIBRARY_MOVIE_NAME：** 电影媒体库目录名，默认`电影`": "- **LIBRARY_MOVIE_NAME：**  Movie media library catalog name， Default (setting)` Cinematic`"
"- **LIBRARY_TV_NAME：** 电视剧媒体库目录名，默认`电视剧`": "- **LIBRARY_TV_NAME：**  Tv series media library catalog name， Default (setting)` Dramas`"
"- **LIBRARY_ANIME_NAME：** 动漫媒体库目录名，默认`电视剧/动漫`": "- **LIBRARY_ANIME_NAME：**  Anime media library catalog name， Default (setting)` Dramas/ Cartoons and comics`"
"- **LIBRARY_CATEGORY：** 媒体库二级分类开关，`true`/`false`，默认`false`，开启后会根据配置 [category.yaml](https://github.com/jxxghp/MoviePilot/raw/main/config/category.yaml) 自动在媒体库目录下建立二级目录分类": "- **LIBRARY_CATEGORY：**  Media library secondary category switch，`true`/`false`， Default (setting)`false`， When turned on it will be configured according to the [category.yaml](https://github.com/jxxghp/MoviePilot/raw/main/config/category.yaml)  Automatic creation of secondary catalog categories in the media library directory"
"- **TRANSFER_TYPE：** 转移方式，支持`link`/`copy`/`move`/`softlink`  **注意：在`link`和`softlink`转移方式下，转移后的文件会继承源文件的权限掩码，不受`UMASK`影响**": "- **TRANSFER_TYPE：**  Migration pattern， Be in favor of`link`/`copy`/`move`/`softlink`  ** Take note of： Exist`link` Cap (a poem)`softlink` Transfer mode， The transferred file inherits the permission mask of the source file， Free from`UMASK` Affect (usually adversely)**"
"- **COOKIECLOUD_HOST：** CookieCloud服务器地址，格式：`http(s)://ip:port`，不配置默认使用内建服务器`https://movie-pilot.org/cookiecloud`": "- **COOKIECLOUD_HOST：** CookieCloud Server address， Specification：`http(s)://ip:port`， No configuration defaults to using the built-in server`https://movie-pilot.org/cookiecloud`"
"- **COOKIECLOUD_KEY：** CookieCloud用户KEY": "- **COOKIECLOUD_KEY：** CookieCloud SubscribersKEY"
"- **COOKIECLOUD_PASSWORD：** CookieCloud端对端加密密码": "- **COOKIECLOUD_PASSWORD：** CookieCloud End-to-end encrypted passwords"
"- **COOKIECLOUD_INTERVAL：** CookieCloud同步间隔（分钟）": "- **COOKIECLOUD_INTERVAL：** CookieCloud Synchronization interval（ Minutes）"
"- **OCR_HOST：** OCR识别服务器地址，格式：`http(s)://ip:port`，用于识别站点二维码实现自动登录获取Cookie等，不配置默认使用内建服务器`https://movie-pilot.org`，可使用 [这个镜像](https://hub.docker.com/r/jxxghp/moviepilot-ocr) 自行搭建。": "- **OCR_HOST：** OCR Identify server address， Specification：`http(s)://ip:port`， Used to recognize site qr codes for automatic login accessCookie Et al. (and other authors)， No configuration defaults to using the built-in server`https://movie-pilot.org`， Usable [ This mirror image](https://hub.docker.com/r/jxxghp/moviepilot-ocr)  Self-constructed。"
"- **USER_AGENT：** CookieCloud对应的浏览器UA，可选，设置后可增加连接站点的成功率，同步站点后可以在管理界面中修改": "- **USER_AGENT：** CookieCloud Corresponding browserUA， Selectable， Set to increase the success rate of connecting to the site， After synchronizing the site, you can modify it in the administration interface"
"- **AUTO_DOWNLOAD_USER：** 交互搜索自动下载用户ID，使用,分割": "- **AUTO_DOWNLOAD_USER：**  Interactive search automatically downloads usersID， Utilization, Demerger"
"- **SUBSCRIBE_MODE：** 订阅模式，`rss`/`spider`，默认`spider`，`rss`模式通过定时刷新RSS来匹配订阅（RSS地址会自动获取，也可手动维护），对站点压力小，同时可设置订阅刷新周期，24小时运行，但订阅和下载通知不能过滤和显示免费，推荐使用rss模式。": "- **SUBSCRIBE_MODE：**  Subscription model，`rss`/`spider`， Default (setting)`spider`，`rss` The mode is refreshed by timing theRSS To match subscriptions（RSS The address is automatically fetched， Manual maintenance is also possible）， Low stress on the site， You can also set the subscription refresh period，24 Hourly operation， However, subscription and download notifications cannot be filtered and displayed free of charge， Recommendedrss Paradigm。"
"- **SUBSCRIBE_RSS_INTERVAL：** RSS订阅模式刷新时间间隔（分钟），默认`30`分钟，不能小于5分钟。": "- **SUBSCRIBE_RSS_INTERVAL：** RSS Subscription mode refresh interval（ Minutes）， Default (setting)`30` Minutes， Cannot be smaller than5 Minutes。"
"- **SUBSCRIBE_SEARCH：** 订阅搜索，`true`/`false`，默认`false`，开启后会每隔24小时对所有订阅进行全量搜索，以补齐缺失剧集（一般情况下正常订阅即可，订阅搜索只做为兜底，会增加站点压力，不建议开启）。": "- **SUBSCRIBE_SEARCH：**  Subscribe to search，`true`/`false`， Default (setting)`false`， When turned on, it will be turned on every24 Hourly full search of all subscriptions， To make up for missing episodes（ Normally a normal subscription will suffice， Subscription search is only for touting， Will increase site stress， Not recommended to be turned on）。"
"- **MESSAGER：** 消息通知渠道，支持 `telegram`/`wechat`/`slack`/`synologychat`，开启多个渠道时使用`,`分隔。同时还需要配置对应渠道的环境变量，非对应渠道的变量可删除，推荐使用`telegram`": "- **MESSAGER：**  Message notification channels， Be in favor of `telegram`/`wechat`/`slack`/`synologychat`， Use when opening multiple channels`,` Segregation。 You also need to configure the environment variables for the corresponding channel， Variables that do not correspond to channels can be deleted， Recommended`telegram`"
"- `wechat`设置项：": "- `wechat` Settings item："
"- **WECHAT_CORPID：** WeChat企业ID": "- **WECHAT_CORPID：** WeChat CorporationsID"
"- **WECHAT_APP_SECRET：** WeChat应用Secret": "- **WECHAT_APP_SECRET：** WeChat ApplianceSecret"
"- **WECHAT_APP_ID：** WeChat应用ID": "- **WECHAT_APP_ID：** WeChat ApplianceID"
"- **WECHAT_TOKEN：** WeChat消息回调的Token": "- **WECHAT_TOKEN：** WeChat Message callbackToken"
"- **WECHAT_ENCODING_AESKEY：** WeChat消息回调的EncodingAESKey": "- **WECHAT_ENCODING_AESKEY：** WeChat Message callbackEncodingAESKey"
"- **WECHAT_ADMINS：** WeChat管理员列表，多个管理员用英文逗号分隔（可选）": "- **WECHAT_ADMINS：** WeChat Administrator list， Multiple administrators separated by commas（ Selectable）"
"- **WECHAT_PROXY：** WeChat代理服务器（后面不要加/）": "- **WECHAT_PROXY：** WeChat Proxy server（ Don't add/）"
"- `telegram`设置项：": "- `telegram` Settings item："
"- **TELEGRAM_USERS：** Telegram 用户ID，多个使用,分隔，只有用户ID在列表中才可以使用Bot，如未设置则均可以使用Bot": "- **TELEGRAM_USERS：** Telegram  SubscribersID， Multiple uses, Segregation， Only the userID It's only available in the listBot， All can be used if not setBot"
"- **TELEGRAM_ADMINS：** Telegram 管理员ID，多个使用,分隔，只有管理员才可以操作Bot菜单，如未设置则均可以操作菜单": "- **TELEGRAM_ADMINS：** Telegram  JanitorsID， Multiple uses, Segregation， Only administrators can operateBot Menu， If not set, all menus can be operated"
"- `slack`设置项：": "- `slack` Settings item："
"- **SLACK_CHANNEL：** Slack 频道名称，默认`全体`": "- **SLACK_CHANNEL：** Slack  Channel name， Default (setting)` Blanket`"
"- `synologychat`设置项：": "- `synologychat` Settings item："
"- **SYNOLOGYCHAT_WEBHOOK：** 在Synology Chat中创建机器人，获取机器人`传入URL`": "- **SYNOLOGYCHAT_WEBHOOK：**  ExistSynology Chat Create a robot in， Get robot` Transmitted inwardsURL`"
"- **SYNOLOGYCHAT_TOKEN：** SynologyChat机器人`令牌`": "- **SYNOLOGYCHAT_TOKEN：** SynologyChat Mechanical person` Token`"
"- **DOWNLOADER：** 下载器，支持`qbittorrent`/`transmission`，QB版本号要求>= 4.3.9，TR版本号要求>= 3.0，同时还需要配置对应渠道的环境变量，非对应渠道的变量可删除，推荐使用`qbittorrent`": "- **DOWNLOADER：**  Downloader， Be in favor of`qbittorrent`/`transmission`，QB Version number requirements>= 4.3.9，TR Version number requirements>= 3.0， You also need to configure the environment variables for the corresponding channel， Variables that do not correspond to channels can be deleted， Recommended`qbittorrent`"
"- `qbittorrent`设置项：": "- `qbittorrent` Settings item："
"- **QB_HOST：** qbittorrent地址，格式：`ip:port`，https需要添加`https://`前缀": "- **QB_HOST：** qbittorrent Address， Specification：`ip:port`，https Need to add`https://` Prefix (linguistics)"
"- **QB_USER：** qbittorrent用户名": "- **QB_USER：** qbittorrent User id"
"- **QB_PASSWORD：** qbittorrent密码": "- **QB_PASSWORD：** qbittorrent Cryptographic"
"- **QB_CATEGORY：** qbittorrent分类自动管理，`true`/`false`，默认`false`，开启后会将下载二级分类传递到下载器，由下载器管理下载目录，需要同步开启`DOWNLOAD_CATEGORY`": "- **QB_CATEGORY：** qbittorrent Automatic management of classifications，`true`/`false`， Default (setting)`false`， When turned on it will pass the download secondary category to the downloader， Managing download catalogs by downloader， Needs to be turned on synchronously`DOWNLOAD_CATEGORY`"
"- `transmission`设置项：": "- `transmission` Settings item："
"- **TR_HOST：** transmission地址，格式：`ip:port`，https需要添加`https://`前缀": "- **TR_HOST：** transmission Address， Specification：`ip:port`，https Need to add`https://` Prefix (linguistics)"
"- **TR_USER：** transmission用户名": "- **TR_USER：** transmission User id"
"- **TR_PASSWORD：** transmission密码": "- **TR_PASSWORD：** transmission Cryptographic"
"- **DOWNLOADER_MONITOR：** 下载器监控，`true`/`false`，默认为`true`，开启后下载完成时才会自动整理入库": "- **DOWNLOADER_MONITOR：**  Downloader monitor，`true`/`false`， Default`true`， Enable to automatically organize into the library only when the download is complete"
"- **MEDIASERVER：** 媒体服务器，支持`emby`/`jellyfin`/`plex`，同时开启多个使用`,`分隔。还需要配置对应媒体服务器的环境变量，非对应媒体服务器的变量可删除，推荐使用`emby`": "- **MEDIASERVER：**  Media server， Be in favor of`emby`/`jellyfin`/`plex`， Turn on multiple uses at the same time`,` Segregation。 You also need to configure the environment variables for the corresponding media server， Variables that do not correspond to a media server can be deleted， Recommended`emby`"
"- `emby`设置项：": "- `emby` Settings item："
"- **EMBY_HOST：** Emby服务器地址，格式：`ip:port`，https需要添加`https://`前缀": "- **EMBY_HOST：** Emby Server address， Specification：`ip:port`，https Need to add`https://` Prefix (linguistics)"
"- **EMBY_API_KEY：** Emby Api Key，在`设置->高级->API密钥`处生成": "- **EMBY_API_KEY：** Emby Api Key， Exist` Set up-> High level->API Keys` Generated at"
"- `jellyfin`设置项：": "- `jellyfin` Settings item："
"- **JELLYFIN_HOST：** Jellyfin服务器地址，格式：`ip:port`，https需要添加`https://`前缀": "- **JELLYFIN_HOST：** Jellyfin Server address， Specification：`ip:port`，https Need to add`https://` Prefix (linguistics)"
"- **JELLYFIN_API_KEY：** Jellyfin Api Key，在`设置->高级->API密钥`处生成": "- **JELLYFIN_API_KEY：** Jellyfin Api Key， Exist` Set up-> High level->API Keys` Generated at"
"- `plex`设置项：": "- `plex` Settings item："
"- **PLEX_HOST：** Plex服务器地址，格式：`ip:port`，https需要添加`https://`前缀": "- **PLEX_HOST：** Plex Server address， Specification：`ip:port`，https Need to add`https://` Prefix (linguistics)"
"- **PLEX_TOKEN：** Plex网页Url中的`X-Plex-Token`，通过浏览器F12->网络从请求URL中获取": "- **PLEX_TOKEN：** Plex Web pageUrl Hit the nail on the head`X-Plex-Token`， Via browserF12-> Network slave requestURL Getting"
"- **MEDIASERVER_SYNC_INTERVAL:** 媒体服务器同步间隔（小时），默认`6`，留空则不同步": "- **MEDIASERVER_SYNC_INTERVAL:**  Media server synchronization interval（ Hourly）， Default (setting)`6`， Leave it blank and it won't synchronize"
"- **MEDIASERVER_SYNC_BLACKLIST:** 媒体服务器同步黑名单，多个媒体库名称使用,分割": "- **MEDIASERVER_SYNC_BLACKLIST:**  Media server synchronization blacklist， Multiple media library name usage, Demerger"
"### 2. **用户认证**": "### 2. ** User authentication**"
"`MoviePilot`需要认证后才能使用，配置`AUTH_SITE`后，需要根据下表配置对应站点的认证参数（**仅能通过docker环境变量配置**）": "`MoviePilot` Authentication required for use， Configure`AUTH_SITE` Empress， You need to configure the authentication parameters for the corresponding site according to the following table（** Passdocker Environment variable configuration**）"
"- **AUTH_SITE：** 认证站点，支持`iyuu`/`hhclub`/`audiences`/`hddolby`/`zmpt`/`freefarm`/`hdfans`/`wintersakura`/`leaves`/`1ptba`/`icc2022`/`ptlsp`/`xingtan`": "- **AUTH_SITE：**  Certified sites， Be in favor of`iyuu`/`hhclub`/`audiences`/`hddolby`/`zmpt`/`freefarm`/`hdfans`/`wintersakura`/`leaves`/`1ptba`/`icc2022`/`ptlsp`/`xingtan`"
"|      站点      |                          参数                           |": "|       Website      |                           Parameters                           |"
"|     iyuu     |                 `IYUU_SIGN`：IYUU登录令牌                  |": "|     iyuu     |                 `IYUU_SIGN`：IYUU Login token                  |"
"|    hhclub    |     `HHCLUB_USERNAME`：用户名<br/>`HHCLUB_PASSKEY`：密钥     |": "|    hhclub    |     `HHCLUB_USERNAME`： User id<br/>`HHCLUB_PASSKEY`： Keys     |"
"|  audiences   |    `AUDIENCES_UID`：用户ID<br/>`AUDIENCES_PASSKEY`：密钥    |": "|  audiences   |    `AUDIENCES_UID`： SubscribersID<br/>`AUDIENCES_PASSKEY`： Keys    |"
"|   hddolby    |      `HDDOLBY_ID`：用户ID<br/>`HDDOLBY_PASSKEY`：密钥       |": "|   hddolby    |      `HDDOLBY_ID`： SubscribersID<br/>`HDDOLBY_PASSKEY`： Keys       |"
"|     zmpt     |         `ZMPT_UID`：用户ID<br/>`ZMPT_PASSKEY`：密钥         |": "|     zmpt     |         `ZMPT_UID`： SubscribersID<br/>`ZMPT_PASSKEY`： Keys         |"
"|   freefarm   |     `FREEFARM_UID`：用户ID<br/>`FREEFARM_PASSKEY`：密钥     |": "|   freefarm   |     `FREEFARM_UID`： SubscribersID<br/>`FREEFARM_PASSKEY`： Keys     |"
"|    hdfans    |       `HDFANS_UID`：用户ID<br/>`HDFANS_PASSKEY`：密钥       |": "|    hdfans    |       `HDFANS_UID`： SubscribersID<br/>`HDFANS_PASSKEY`： Keys       |"
"| wintersakura | `WINTERSAKURA_UID`：用户ID<br/>`WINTERSAKURA_PASSKEY`：密钥 |": "| wintersakura | `WINTERSAKURA_UID`： SubscribersID<br/>`WINTERSAKURA_PASSKEY`： Keys |"
"|    leaves    |       `LEAVES_UID`：用户ID<br/>`LEAVES_PASSKEY`：密钥       |": "|    leaves    |       `LEAVES_UID`： SubscribersID<br/>`LEAVES_PASSKEY`： Keys       |"
"|    1ptba     |        `1PTBA_UID`：用户ID<br/>`1PTBA_PASSKEY`：密钥        |": "|    1ptba     |        `1PTBA_UID`： SubscribersID<br/>`1PTBA_PASSKEY`： Keys        |"
"|   icc2022    |      `ICC2022_UID`：用户ID<br/>`ICC2022_PASSKEY`：密钥      |": "|   icc2022    |      `ICC2022_UID`： SubscribersID<br/>`ICC2022_PASSKEY`： Keys      |"
"|    ptlsp     |        `PTLSP_UID`：用户ID<br/>`PTLSP_PASSKEY`：密钥        |": "|    ptlsp     |        `PTLSP_UID`： SubscribersID<br/>`PTLSP_PASSKEY`： Keys        |"
"|   xingtan    |      `XINGTAN_UID`：用户ID<br/>`XINGTAN_PASSKEY`：密钥      |": "|   xingtan    |      `XINGTAN_UID`： SubscribersID<br/>`XINGTAN_PASSKEY`： Keys      |"
"### 2. **进阶配置**": "### 2. ** Advanced configuration**"
"- **BIG_MEMORY_MODE：** 大内存模式，默认为`false`，开启后会占用更多的内存，但响应速度会更快": "- **BIG_MEMORY_MODE：**  Large memory mode， Default`false`， Takes up more memory when turned on， But the response time will be faster"
"- **MOVIE_RENAME_FORMAT：** 电影重命名格式": "- **MOVIE_RENAME_FORMAT：**  Movie renaming format"
"`MOVIE_RENAME_FORMAT`支持的配置项：": "`MOVIE_RENAME_FORMAT` Supported configuration items："
"> `title`： 标题": "> `title`：  Caption"
"> `original_name`： 原文件名": "> `original_name`：  Original filename"
"> `original_title`： 原语种标题": "> `original_title`：  Title in original language"
"> `name`： 识别名称": "> `name`：  Identifying name"
"> `year`： 年份": "> `year`：  Particular year"
"> `resourceType`：资源类型": "> `resourceType`： Resource type"
"> `effect`：特效": "> `effect`： Especially efficacious"
"> `edition`： 版本（资源类型+特效）": "> `edition`：  Releases（ Resource type+ Especially efficacious）"
"> `videoFormat`： 分辨率": "> `videoFormat`：  Resolution (of a photo)"
"> `releaseGroup`： 制作组/字幕组": "> `releaseGroup`：  Production team/ Subtitling team"
"> `videoCodec`： 视频编码": "> `videoCodec`：  Video encoding"
"> `audioCodec`： 音频编码": "> `audioCodec`：  Audio encoding"
"> `part`：段/节": "> `part`： Stage (of a process)/ Classifier for segments, e.g. lessons, train wagons, biblical verses"
"> `fileExt`：文件扩展名": "> `fileExt`： File extension"
"`MOVIE_RENAME_FORMAT`默认配置格式：": "`MOVIE_RENAME_FORMAT` Default configuration format："
"- **TV_RENAME_FORMAT：** 电视剧重命名格式": "- **TV_RENAME_FORMAT：**  Tv series renaming format"
"`TV_RENAME_FORMAT`额外支持的配置项：": "`TV_RENAME_FORMAT` Additional supported configuration items："
"> `season`： 季号": "> `season`：  Quarter"
"> `episode`： 集号": "> `episode`：  Bugle call"
"> `season_episode`： 季集 SxxExx": "> `season_episode`：  End of a season SxxExx"
"> `episode_title`： 集标题": "> `episode_title`：  Episode title"
"`TV_RENAME_FORMAT`默认配置格式：": "`TV_RENAME_FORMAT` Default configuration format："
"{{title}}{% if year %} ({{year}}){% endif %}/Season {{season}}/{{title}} - {{season_episode}}{% if part %}-{{part}}{% endif %}{% if episode %} - 第 {{episode}} 集{% endif %}{{fileExt}}": "{{title}}{% if year %} ({{year}}){% endif %}/Season {{season}}/{{title}} - {{season_episode}}{% if part %}-{{part}}{% endif %}{% if episode %} -  (prefix indicating ordinal number, e.g. first, number two etc) {{episode}}  Classifier for sections of a tv series e.g. episode{% endif %}{{fileExt}}"
"### 3. **过滤规则**": "### 3. ** Filter rules**"
"在`设定`-`规则`中设定，规则说明：": "` Exist`-` Preferences` Rules and regulations， Default setting：
 Explanation of the rules"
"- 仅支持使用内置规则进行排列组合，内置规则有：`蓝光原盘`、`4K`、`1080P`、`中文字幕`、`特效字幕`、`H265`、`H264`、`杜比`、`HDR`、`REMUX`、`WEB-DL`、`免费`、`国语配音` 等": "-  Only permutations using built-in rules are supported， The built-in rules are：` Blu-ray disk`、`4K`、`1080P`、` Chinese subtitles`、` Special effects montage`、`H265`、`H264`、` Dolby`、`HDR`、`REMUX`、`WEB-DL`、` Free (of charge)`、` Mandarin dub`  Et al. (and other authors)"
"- 符合任一层级规则的资源将被标识选中，匹配成功的层级做为该资源的优先级，排越前面优先级超高": "-  Resources that match any of the tier rules will be marked as selected， The level of successful matching is used as the priority of the resource， The higher the ranking, the higher the priority."
"- 不符合过滤规则所有层级规则的资源将不会被选中": "-  Resources that do not meet all the hierarchical rules of the filtering rule will not be selected"
"## 使用": "##  Utilization"
"- 通过CookieCloud同步快速同步站点，不需要使用的站点可在WEB管理界面中禁用，无法同步的站点可手动新增。": "-  Pass (a bill or inspection etc)CookieCloud Synchronize fast sync sites， Sites that do not need to use theWEB Disable in the management interface， Sites that cannot be synchronized can be added manually。"
"- 通过WEB进行管理，将WEB添加到手机桌面获得类App使用效果，管理界面端口：`3000`，后台API端口：`3001`。": "-  Pass (a bill or inspection etc)WEB Manage， Commander-in-chief (military)WEB Add to mobile desktop to get the classApp Utilization effect， Management interface port：`3000`， The area behind a theatrical stageAPI Ports：`3001`。"
"- 通过下载器监控或使用目录监控插件实现自动整理入库刮削（二选一）。": "-  Automatically organize inbound scraping via downloader monitoring or using a directory monitoring plugin（ Choose two）。"
"- 通过微信/Telegram/Slack/SynologyChat远程管理，其中微信/Telegram将会自动添加操作菜单（微信菜单条数有限制，部分菜单不显示）；微信需要在官方页面设置回调地址，SynologyChat需要设置机器人传入地址，地址相对路径为：`/api/v1/message/`。": "-  Via wechat/Telegram/Slack/SynologyChat Remote management， Among them, wechat/Telegram The operation menu will be added automatically（ There is a limit to the number of wechat menu items， Some menus are not displayed）； Wechat needs to set the callback address on the official page，SynologyChat Need to set up robot incoming address， The relative path to the address is：`/api/v1/message/`。"
"- 设置媒体服务器Webhook，通过MoviePilot发送播放通知等。Webhook回调相对路径为`/api/v1/webhook?token=moviepilot`（`3001`端口），其中`moviepilot`为设置的`API_TOKEN`。": "-  Setting up the media serverWebhook， Pass (a bill or inspection etc)MoviePilot Send playback notifications, etc.。Webhook The callback relative path is`/api/v1/webhook?token=moviepilot`（`3001` Ports）， Included among these`moviepilot` Set`API_TOKEN`。"
"- 将MoviePilot做为Radarr或Sonarr服务器添加到Overseerr或Jellyseerr（`API服务端口`），可使用Overseerr/Jellyseerr浏览订阅。": "-  Commander-in-chief (military)MoviePilot Act asRadarr MaybeSonarr The server is added to theOverseerr MaybeJellyseerr（`API Service port`）， UsableOverseerr/Jellyseerr Browse subscriptions。"
"- 映射宿主机docker.sock文件到容器`/var/run/docker.sock`，以支持内建重启操作。实例：`-v /var/run/docker.sock:/var/run/docker.sock:ro`": "-  Mapping the hostdocker.sock File to container`/var/run/docker.sock`， To support built-in reboot operations。 An actual example：`-v /var/run/docker.sock:/var/run/docker.sock:ro`"
"**注意**": "** Take note of**"
"1) 容器首次启动需要下载浏览器内核，根据网络情况可能需要较长时间，此时无法登录。可映射`/moviepilot`目录避免容器重置后重新触发浏览器内核下载。": "1)  Browser kernel download required for first container startup， May take longer depending on network conditions， Unable to log in at this time。 Mappable`/moviepilot` Catalog avoids retriggering browser kernel downloads after container reset。"
"2) 使用反向代理时，需要添加以下配置，否则可能会导致部分功能无法访问（`ip:port`修改为实际值）：": "2)  When using a reverse proxy， The following configuration needs to be added， Failure to do so may result in some features being inaccessible（`ip:port` Modify to actual value）："
"3) 新建的企业微信应用需要固定公网IP的代理才能收到消息，代理添加以下代码：": "3)  The new enterprise wechat application needs to be fixed public networkIP In order to receive the message， The agent adds the following code："
